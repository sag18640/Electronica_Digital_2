

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Thu Feb 18 00:55:32 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    19                           	dabs	1,0x7E,2
    20  0000                     
    21                           ; Version 2.20
    22                           ; Generated 12/02/2020 GMT
    23                           ; 
    24                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16F887 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  0007                     	;# 
    63  0008                     	;# 
    64  0009                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  000D                     	;# 
    69  000E                     	;# 
    70  000E                     	;# 
    71  000F                     	;# 
    72  0010                     	;# 
    73  0011                     	;# 
    74  0012                     	;# 
    75  0013                     	;# 
    76  0014                     	;# 
    77  0015                     	;# 
    78  0015                     	;# 
    79  0016                     	;# 
    80  0017                     	;# 
    81  0018                     	;# 
    82  0019                     	;# 
    83  001A                     	;# 
    84  001B                     	;# 
    85  001B                     	;# 
    86  001C                     	;# 
    87  001D                     	;# 
    88  001E                     	;# 
    89  001F                     	;# 
    90  0081                     	;# 
    91  0085                     	;# 
    92  0086                     	;# 
    93  0087                     	;# 
    94  0088                     	;# 
    95  0089                     	;# 
    96  008C                     	;# 
    97  008D                     	;# 
    98  008E                     	;# 
    99  008F                     	;# 
   100  0090                     	;# 
   101  0091                     	;# 
   102  0092                     	;# 
   103  0093                     	;# 
   104  0093                     	;# 
   105  0093                     	;# 
   106  0094                     	;# 
   107  0095                     	;# 
   108  0096                     	;# 
   109  0097                     	;# 
   110  0098                     	;# 
   111  0099                     	;# 
   112  009A                     	;# 
   113  009B                     	;# 
   114  009C                     	;# 
   115  009D                     	;# 
   116  009E                     	;# 
   117  009F                     	;# 
   118  0105                     	;# 
   119  0107                     	;# 
   120  0108                     	;# 
   121  0109                     	;# 
   122  010C                     	;# 
   123  010C                     	;# 
   124  010D                     	;# 
   125  010E                     	;# 
   126  010F                     	;# 
   127  0185                     	;# 
   128  0187                     	;# 
   129  0188                     	;# 
   130  0189                     	;# 
   131  018C                     	;# 
   132  018D                     	;# 
   133  0000                     	;# 
   134  0001                     	;# 
   135  0002                     	;# 
   136  0003                     	;# 
   137  0004                     	;# 
   138  0005                     	;# 
   139  0006                     	;# 
   140  0007                     	;# 
   141  0008                     	;# 
   142  0009                     	;# 
   143  000A                     	;# 
   144  000B                     	;# 
   145  000C                     	;# 
   146  000D                     	;# 
   147  000E                     	;# 
   148  000E                     	;# 
   149  000F                     	;# 
   150  0010                     	;# 
   151  0011                     	;# 
   152  0012                     	;# 
   153  0013                     	;# 
   154  0014                     	;# 
   155  0015                     	;# 
   156  0015                     	;# 
   157  0016                     	;# 
   158  0017                     	;# 
   159  0018                     	;# 
   160  0019                     	;# 
   161  001A                     	;# 
   162  001B                     	;# 
   163  001B                     	;# 
   164  001C                     	;# 
   165  001D                     	;# 
   166  001E                     	;# 
   167  001F                     	;# 
   168  0081                     	;# 
   169  0085                     	;# 
   170  0086                     	;# 
   171  0087                     	;# 
   172  0088                     	;# 
   173  0089                     	;# 
   174  008C                     	;# 
   175  008D                     	;# 
   176  008E                     	;# 
   177  008F                     	;# 
   178  0090                     	;# 
   179  0091                     	;# 
   180  0092                     	;# 
   181  0093                     	;# 
   182  0093                     	;# 
   183  0093                     	;# 
   184  0094                     	;# 
   185  0095                     	;# 
   186  0096                     	;# 
   187  0097                     	;# 
   188  0098                     	;# 
   189  0099                     	;# 
   190  009A                     	;# 
   191  009B                     	;# 
   192  009C                     	;# 
   193  009D                     	;# 
   194  009E                     	;# 
   195  009F                     	;# 
   196  0105                     	;# 
   197  0107                     	;# 
   198  0108                     	;# 
   199  0109                     	;# 
   200  010C                     	;# 
   201  010C                     	;# 
   202  010D                     	;# 
   203  010E                     	;# 
   204  010F                     	;# 
   205  0185                     	;# 
   206  0187                     	;# 
   207  0188                     	;# 
   208  0189                     	;# 
   209  018C                     	;# 
   210  018D                     	;# 
   211  0000                     	;# 
   212  0001                     	;# 
   213  0002                     	;# 
   214  0003                     	;# 
   215  0004                     	;# 
   216  0005                     	;# 
   217  0006                     	;# 
   218  0007                     	;# 
   219  0008                     	;# 
   220  0009                     	;# 
   221  000A                     	;# 
   222  000B                     	;# 
   223  000C                     	;# 
   224  000D                     	;# 
   225  000E                     	;# 
   226  000E                     	;# 
   227  000F                     	;# 
   228  0010                     	;# 
   229  0011                     	;# 
   230  0012                     	;# 
   231  0013                     	;# 
   232  0014                     	;# 
   233  0015                     	;# 
   234  0015                     	;# 
   235  0016                     	;# 
   236  0017                     	;# 
   237  0018                     	;# 
   238  0019                     	;# 
   239  001A                     	;# 
   240  001B                     	;# 
   241  001B                     	;# 
   242  001C                     	;# 
   243  001D                     	;# 
   244  001E                     	;# 
   245  001F                     	;# 
   246  0081                     	;# 
   247  0085                     	;# 
   248  0086                     	;# 
   249  0087                     	;# 
   250  0088                     	;# 
   251  0089                     	;# 
   252  008C                     	;# 
   253  008D                     	;# 
   254  008E                     	;# 
   255  008F                     	;# 
   256  0090                     	;# 
   257  0091                     	;# 
   258  0092                     	;# 
   259  0093                     	;# 
   260  0093                     	;# 
   261  0093                     	;# 
   262  0094                     	;# 
   263  0095                     	;# 
   264  0096                     	;# 
   265  0097                     	;# 
   266  0098                     	;# 
   267  0099                     	;# 
   268  009A                     	;# 
   269  009B                     	;# 
   270  009C                     	;# 
   271  009D                     	;# 
   272  009E                     	;# 
   273  009F                     	;# 
   274  0105                     	;# 
   275  0107                     	;# 
   276  0108                     	;# 
   277  0109                     	;# 
   278  010C                     	;# 
   279  010C                     	;# 
   280  010D                     	;# 
   281  010E                     	;# 
   282  010F                     	;# 
   283  0185                     	;# 
   284  0187                     	;# 
   285  0188                     	;# 
   286  0189                     	;# 
   287  018C                     	;# 
   288  018D                     	;# 
   289                           
   290                           	psect	idataCOMMON
   291  00C8                     __pidataCOMMON:
   292                           
   293                           ;initializer for _flag
   294  00C8  3401               	retlw	1
   295  0013                     _SSPBUF	set	19
   296  0014                     _SSPCON	set	20
   297  0006                     _PORTBbits	set	6
   298  000B                     _INTCONbits	set	11
   299  000B                     _INTCON	set	11
   300  0009                     _PORTE	set	9
   301  0005                     _PORTA	set	5
   302  0007                     _PORTC	set	7
   303  0006                     _PORTB	set	6
   304  0008                     _PORTD	set	8
   305  0063                     _SSPIF	set	99
   306  0094                     _SSPSTATbits	set	148
   307  0094                     _SSPSTAT	set	148
   308  0096                     _IOCBbits	set	150
   309  0089                     _TRISE	set	137
   310  0085                     _TRISAbits	set	133
   311  0086                     _TRISB	set	134
   312  0087                     _TRISC	set	135
   313  0088                     _TRISD	set	136
   314                           
   315                           	psect	cinit
   316  000F                     start_initialization:	
   317                           ; #config settings
   318                           
   319  000F                     __initialization:
   320                           
   321                           ; Initialize objects allocated to COMMON
   322  000F  120A  118A  20C8  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   323  0014  00F8               	movwf	__pdataCOMMON& (0+127)
   324                           
   325                           ; Clear objects allocated to COMMON
   326  0015  01F5               	clrf	__pbssCOMMON& (0+127)
   327  0016  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
   328  0017  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
   329  0018                     end_of_initialization:	
   330                           ;End of C runtime variable initialization code
   331                           
   332  0018                     __end_of__initialization:
   333  0018  0183               	clrf	3
   334  0019  120A  118A  2868   	ljmp	_main	;jump to C main() function
   335                           
   336                           	psect	bssCOMMON
   337  0075                     __pbssCOMMON:
   338  0075                     _a:
   339  0075                     	ds	1
   340  0076                     _flag2:
   341  0076                     	ds	1
   342  0077                     _count:
   343  0077                     	ds	1
   344                           
   345                           	psect	dataCOMMON
   346  0078                     __pdataCOMMON:
   347  0078                     _flag:
   348  0078                     	ds	1
   349                           
   350                           	psect	cstackCOMMON
   351  0070                     __pcstackCOMMON:
   352  0070                     ?_setup:
   353  0070                     ?_spiRead:	
   354                           ; 1 bytes @ 0x0
   355                           
   356  0070                     ??_spiRead:	
   357                           ; 1 bytes @ 0x0
   358                           
   359  0070                     ?_spiWrite:	
   360                           ; 1 bytes @ 0x0
   361                           
   362  0070                     ??_spiWrite:	
   363                           ; 1 bytes @ 0x0
   364                           
   365  0070                     ?_main:	
   366                           ; 1 bytes @ 0x0
   367                           
   368  0070                     ?_ISR:	
   369                           ; 1 bytes @ 0x0
   370                           
   371  0070                     ?_spiReceiveWait:	
   372                           ; 1 bytes @ 0x0
   373                           
   374  0070                     ??_spiReceiveWait:	
   375                           ; 1 bytes @ 0x0
   376                           
   377  0070                     spiWrite@dat:	
   378                           ; 1 bytes @ 0x0
   379                           
   380                           
   381                           ; 1 bytes @ 0x0
   382  0070                     	ds	1
   383  0071                     ??_ISR:
   384                           
   385                           ; 1 bytes @ 0x1
   386  0071                     	ds	3
   387  0074                     ??_setup:
   388  0074                     ??_spiInit:	
   389                           ; 1 bytes @ 0x4
   390                           
   391  0074                     spiInit@sType:	
   392                           ; 1 bytes @ 0x4
   393                           
   394                           
   395                           ; 1 bytes @ 0x4
   396  0074                     	ds	1
   397  0075                     ??_main:
   398                           
   399                           	psect	cstackBANK0
   400  0020                     __pcstackBANK0:	
   401                           ; 1 bytes @ 0x5
   402                           
   403  0020                     ?_spiInit:
   404  0020                     spiInit@sDataSample:	
   405                           ; 1 bytes @ 0x0
   406                           
   407                           
   408                           ; 1 bytes @ 0x0
   409  0020                     	ds	1
   410  0021                     spiInit@sClockIdle:
   411                           
   412                           ; 1 bytes @ 0x1
   413  0021                     	ds	1
   414  0022                     spiInit@sTransmitEdge:
   415                           
   416                           ; 1 bytes @ 0x2
   417  0022                     	ds	1
   418                           
   419                           	psect	maintext
   420  0068                     __pmaintext:	
   421 ;;
   422 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   423 ;;
   424 ;; *************** function _main *****************
   425 ;; Defined at:
   426 ;;		line 53 in file "main.c"
   427 ;; Parameters:    Size  Location     Type
   428 ;;		None
   429 ;; Auto vars:     Size  Location     Type
   430 ;;		None
   431 ;; Return value:  Size  Location     Type
   432 ;;                  1    wreg      void 
   433 ;; Registers used:
   434 ;;		wreg, status,2, status,0, pclath, cstack
   435 ;; Tracked objects:
   436 ;;		On entry : B00/0
   437 ;;		On exit  : 0/0
   438 ;;		Unchanged: 0/0
   439 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   440 ;;      Params:         0       0       0       0       0
   441 ;;      Locals:         0       0       0       0       0
   442 ;;      Temps:          0       0       0       0       0
   443 ;;      Totals:         0       0       0       0       0
   444 ;;Total ram usage:        0 bytes
   445 ;; Hardware stack levels required when called:    4
   446 ;; This function calls:
   447 ;;		_setup
   448 ;;		_spiInit
   449 ;; This function is called by:
   450 ;;		Startup code after reset
   451 ;; This function uses a non-reentrant model
   452 ;;
   453                           
   454                           
   455                           ;psect for function _main
   456  0068                     _main:
   457  0068                     l797:	
   458                           ;incstack = 0
   459                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   460                           
   461                           
   462                           ;main.c: 54:     setup();
   463  0068  120A  118A  209C  120A  118A  	fcall	_setup
   464  006D                     l799:
   465                           
   466                           ;main.c: 55:     count = 0;
   467  006D  01F7               	clrf	_count
   468  006E                     l801:
   469                           
   470                           ;main.c: 56:     flag = 1;
   471  006E  01F8               	clrf	_flag
   472  006F  0AF8               	incf	_flag,f
   473  0070                     l803:
   474                           
   475                           ;main.c: 57:     spiInit(SPI_SLAVE_SS_EN, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_LOW, SP
      +                          I_IDLE_2_ACTIVE);
   476  0070  1283               	bcf	3,5	;RP0=0, select bank0
   477  0071  1303               	bcf	3,6	;RP1=0, select bank0
   478  0072  01A0               	clrf	spiInit@sDataSample
   479  0073  01A1               	clrf	spiInit@sClockIdle
   480  0074  01A2               	clrf	spiInit@sTransmitEdge
   481  0075  3024               	movlw	36
   482  0076  120A  118A  2083  120A  118A  	fcall	_spiInit
   483  007B                     l805:
   484                           
   485                           ;main.c: 61:         PORTD = count;
   486  007B  0877               	movf	_count,w
   487  007C  1283               	bcf	3,5	;RP0=0, select bank0
   488  007D  1303               	bcf	3,6	;RP1=0, select bank0
   489  007E  0088               	movwf	8	;volatile
   490  007F  287B               	goto	l805
   491  0080  120A  118A  280C   	ljmp	start
   492  0083                     __end_of_main:
   493                           
   494                           	psect	text1
   495  0083                     __ptext1:	
   496 ;; *************** function _spiInit *****************
   497 ;; Defined at:
   498 ;;		line 13 in file "SPI.c"
   499 ;; Parameters:    Size  Location     Type
   500 ;;  sType           1    wreg     enum E1264
   501 ;;  sDataSample     1    0[BANK0 ] enum E1272
   502 ;;  sClockIdle      1    1[BANK0 ] enum E1276
   503 ;;  sTransmitEdg    1    2[BANK0 ] enum E1280
   504 ;; Auto vars:     Size  Location     Type
   505 ;;  sType           1    4[COMMON] enum E1264
   506 ;; Return value:  Size  Location     Type
   507 ;;                  1    wreg      void 
   508 ;; Registers used:
   509 ;;		wreg, status,2, status,0
   510 ;; Tracked objects:
   511 ;;		On entry : 0/0
   512 ;;		On exit  : 0/0
   513 ;;		Unchanged: 0/0
   514 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   515 ;;      Params:         0       3       0       0       0
   516 ;;      Locals:         1       0       0       0       0
   517 ;;      Temps:          0       0       0       0       0
   518 ;;      Totals:         1       3       0       0       0
   519 ;;Total ram usage:        4 bytes
   520 ;; Hardware stack levels used:    1
   521 ;; Hardware stack levels required when called:    3
   522 ;; This function calls:
   523 ;;		Nothing
   524 ;; This function is called by:
   525 ;;		_main
   526 ;; This function uses a non-reentrant model
   527 ;;
   528                           
   529                           
   530                           ;psect for function _spiInit
   531  0083                     _spiInit:
   532                           
   533                           ;incstack = 0
   534                           ; Regs used in _spiInit: [wreg+status,2+status,0]
   535                           ;spiInit@sType stored from wreg
   536  0083  00F4               	movwf	spiInit@sType
   537  0084                     l791:
   538                           
   539                           ;SPI.c: 13: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 14: {;SPI.c: 16:     if(sType & 0b00000
      +                          100)
   540  0084  1D74               	btfss	spiInit@sType,2
   541  0085  2887               	goto	u121
   542  0086  2888               	goto	u120
   543  0087                     u121:
   544  0087  288F               	goto	l795
   545  0088                     u120:
   546  0088                     l793:
   547                           
   548                           ;SPI.c: 17:     {;SPI.c: 18:         SSPSTAT = sTransmitEdge;
   549  0088  1283               	bcf	3,5	;RP0=0, select bank0
   550  0089  1303               	bcf	3,6	;RP1=0, select bank0
   551  008A  0822               	movf	spiInit@sTransmitEdge,w
   552  008B  1683               	bsf	3,5	;RP0=1, select bank1
   553  008C  1303               	bcf	3,6	;RP1=0, select bank1
   554  008D  0094               	movwf	20	;volatile
   555                           
   556                           ;SPI.c: 20:     }
   557  008E  2896               	goto	l87
   558  008F                     l795:
   559                           
   560                           ;SPI.c: 22:     {;SPI.c: 23:         SSPSTAT = sDataSample | sTransmitEdge;
   561  008F  1283               	bcf	3,5	;RP0=0, select bank0
   562  0090  1303               	bcf	3,6	;RP1=0, select bank0
   563  0091  0820               	movf	spiInit@sDataSample,w
   564  0092  0422               	iorwf	spiInit@sTransmitEdge,w
   565  0093  1683               	bsf	3,5	;RP0=1, select bank1
   566  0094  1303               	bcf	3,6	;RP1=0, select bank1
   567  0095  0094               	movwf	20	;volatile
   568  0096                     l87:	
   569                           ;SPI.c: 25:     }
   570                           
   571                           
   572                           ;SPI.c: 27:     SSPCON = sType | sClockIdle;
   573  0096  0874               	movf	spiInit@sType,w
   574  0097  1283               	bcf	3,5	;RP0=0, select bank0
   575  0098  1303               	bcf	3,6	;RP1=0, select bank0
   576  0099  0421               	iorwf	spiInit@sClockIdle,w
   577  009A  0094               	movwf	20	;volatile
   578  009B                     l88:
   579  009B  0008               	return
   580  009C                     __end_of_spiInit:
   581                           
   582                           	psect	text2
   583  009C                     __ptext2:	
   584 ;; *************** function _setup *****************
   585 ;; Defined at:
   586 ;;		line 74 in file "main.c"
   587 ;; Parameters:    Size  Location     Type
   588 ;;		None
   589 ;; Auto vars:     Size  Location     Type
   590 ;;		None
   591 ;; Return value:  Size  Location     Type
   592 ;;                  1    wreg      void 
   593 ;; Registers used:
   594 ;;		wreg, status,2
   595 ;; Tracked objects:
   596 ;;		On entry : 0/0
   597 ;;		On exit  : 0/0
   598 ;;		Unchanged: 0/0
   599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   600 ;;      Params:         0       0       0       0       0
   601 ;;      Locals:         0       0       0       0       0
   602 ;;      Temps:          0       0       0       0       0
   603 ;;      Totals:         0       0       0       0       0
   604 ;;Total ram usage:        0 bytes
   605 ;; Hardware stack levels used:    1
   606 ;; Hardware stack levels required when called:    3
   607 ;; This function calls:
   608 ;;		Nothing
   609 ;; This function is called by:
   610 ;;		_main
   611 ;; This function uses a non-reentrant model
   612 ;;
   613                           
   614                           
   615                           ;psect for function _setup
   616  009C                     _setup:
   617  009C                     l699:	
   618                           ;incstack = 0
   619                           ; Regs used in _setup: [wreg+status,2]
   620                           
   621                           
   622                           ;main.c: 75:     TRISD = 0b00000000;
   623  009C  1683               	bsf	3,5	;RP0=1, select bank1
   624  009D  1303               	bcf	3,6	;RP1=0, select bank1
   625  009E  0188               	clrf	8	;volatile
   626  009F                     l701:
   627                           
   628                           ;main.c: 76:     TRISC = 0b00011000;
   629  009F  3018               	movlw	24
   630  00A0  0087               	movwf	7	;volatile
   631  00A1                     l703:
   632                           
   633                           ;main.c: 77:     TRISB = 0b11111110;
   634  00A1  30FE               	movlw	254
   635  00A2  0086               	movwf	6	;volatile
   636  00A3                     l705:
   637                           
   638                           ;main.c: 79:     TRISAbits.TRISA5 = 1;
   639  00A3  1685               	bsf	5,5	;volatile
   640                           
   641                           ;main.c: 80:     TRISE = 0b00000000;
   642  00A4  0189               	clrf	9	;volatile
   643  00A5                     l707:
   644                           
   645                           ;main.c: 81:     IOCBbits.IOCB6 = 1;
   646  00A5  1716               	bsf	22,6	;volatile
   647  00A6                     l709:
   648                           
   649                           ;main.c: 82:     IOCBbits.IOCB7 = 1;
   650  00A6  1796               	bsf	22,7	;volatile
   651                           
   652                           ;main.c: 83:     PORTB = 0;
   653  00A7  1283               	bcf	3,5	;RP0=0, select bank0
   654  00A8  1303               	bcf	3,6	;RP1=0, select bank0
   655  00A9  0186               	clrf	6	;volatile
   656                           
   657                           ;main.c: 84:     PORTC = 0;
   658  00AA  0187               	clrf	7	;volatile
   659                           
   660                           ;main.c: 85:     PORTD = 0;
   661  00AB  0188               	clrf	8	;volatile
   662                           
   663                           ;main.c: 86:     PORTA = 0;
   664  00AC  0185               	clrf	5	;volatile
   665                           
   666                           ;main.c: 87:     PORTE = 0;
   667  00AD  0189               	clrf	9	;volatile
   668                           
   669                           ;main.c: 88:     flag2 = 0;
   670  00AE  01F6               	clrf	_flag2
   671  00AF                     l711:
   672                           
   673                           ;main.c: 89:     INTCON = 0b11101000;
   674  00AF  30E8               	movlw	232
   675  00B0  008B               	movwf	11	;volatile
   676  00B1                     l57:
   677  00B1  0008               	return
   678  00B2                     __end_of_setup:
   679                           
   680                           	psect	text3
   681  001C                     __ptext3:	
   682 ;; *************** function _ISR *****************
   683 ;; Defined at:
   684 ;;		line 97 in file "main.c"
   685 ;; Parameters:    Size  Location     Type
   686 ;;		None
   687 ;; Auto vars:     Size  Location     Type
   688 ;;		None
   689 ;; Return value:  Size  Location     Type
   690 ;;                  1    wreg      void 
   691 ;; Registers used:
   692 ;;		wreg, status,2, status,0, pclath, cstack
   693 ;; Tracked objects:
   694 ;;		On entry : 0/0
   695 ;;		On exit  : 0/0
   696 ;;		Unchanged: 0/0
   697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   698 ;;      Params:         0       0       0       0       0
   699 ;;      Locals:         0       0       0       0       0
   700 ;;      Temps:          3       0       0       0       0
   701 ;;      Totals:         3       0       0       0       0
   702 ;;Total ram usage:        3 bytes
   703 ;; Hardware stack levels used:    1
   704 ;; Hardware stack levels required when called:    2
   705 ;; This function calls:
   706 ;;		_spiRead
   707 ;;		_spiWrite
   708 ;; This function is called by:
   709 ;;		Interrupt level 1
   710 ;; This function uses a non-reentrant model
   711 ;;
   712                           
   713                           
   714                           ;psect for function _ISR
   715  001C                     _ISR:
   716  001C                     i1l737:
   717                           
   718                           ;main.c: 98:     if (SSPIF == 1) {
   719  001C  1283               	bcf	3,5	;RP0=0, select bank0
   720  001D  1303               	bcf	3,6	;RP1=0, select bank0
   721  001E  1D8C               	btfss	12,3	;volatile
   722  001F  2821               	goto	u3_21
   723  0020  2822               	goto	u3_20
   724  0021                     u3_21:
   725  0021  2833               	goto	i1l743
   726  0022                     u3_20:
   727  0022                     i1l739:
   728                           
   729                           ;main.c: 99:         a = spiRead();
   730  0022  120A  118A  20B2  120A  118A  	fcall	_spiRead
   731  0027  00F1               	movwf	??_ISR
   732  0028  0871               	movf	??_ISR,w
   733  0029  00F5               	movwf	_a
   734                           
   735                           ;main.c: 100:         spiWrite(count);
   736  002A  0877               	movf	_count,w
   737  002B  120A  118A  20C2  120A  118A  	fcall	_spiWrite
   738  0030                     i1l741:
   739                           
   740                           ;main.c: 101:         SSPIF = 0;
   741  0030  1283               	bcf	3,5	;RP0=0, select bank0
   742  0031  1303               	bcf	3,6	;RP1=0, select bank0
   743  0032  118C               	bcf	12,3	;volatile
   744  0033                     i1l743:
   745                           
   746                           ;main.c: 103:     if (INTCONbits.RBIF == 1) {
   747  0033  1C0B               	btfss	11,0	;volatile
   748  0034  2836               	goto	u4_21
   749  0035  2837               	goto	u4_20
   750  0036                     u4_21:
   751  0036  2860               	goto	i1l767
   752  0037                     u4_20:
   753  0037                     i1l745:
   754                           
   755                           ;main.c: 104:         if (PORTBbits.RB6 == 0) {
   756  0037  1B06               	btfsc	6,6	;volatile
   757  0038  283A               	goto	u5_21
   758  0039  283B               	goto	u5_20
   759  003A                     u5_21:
   760  003A  284D               	goto	i1l64
   761  003B                     u5_20:
   762  003B  2842               	goto	i1l751
   763  003C                     i1l66:
   764                           
   765                           ;main.c: 106:                 if (PORTBbits.RB6 == 1) {
   766  003C  1F06               	btfss	6,6	;volatile
   767  003D  283F               	goto	u6_21
   768  003E  2840               	goto	u6_20
   769  003F                     u6_21:
   770  003F  2842               	goto	i1l751
   771  0040                     u6_20:
   772  0040                     i1l749:
   773                           
   774                           ;main.c: 107:                     flag2 = 1;
   775  0040  01F6               	clrf	_flag2
   776  0041  0AF6               	incf	_flag2,f
   777  0042                     i1l751:
   778                           
   779                           ;main.c: 105:             while (flag2 == 0) {
   780  0042  0876               	movf	_flag2,w
   781  0043  1903               	btfsc	3,2
   782  0044  2846               	goto	u7_21
   783  0045  2847               	goto	u7_20
   784  0046                     u7_21:
   785  0046  283C               	goto	i1l66
   786  0047                     u7_20:
   787  0047                     i1l753:
   788                           
   789                           ;main.c: 110:             flag2 = 0;
   790  0047  01F6               	clrf	_flag2
   791  0048                     i1l755:
   792                           
   793                           ;main.c: 111:             count++;
   794  0048  3001               	movlw	1
   795  0049  00F1               	movwf	??_ISR
   796  004A  0871               	movf	??_ISR,w
   797  004B  07F7               	addwf	_count,f
   798                           
   799                           ;main.c: 113:         } else if (PORTBbits.RB7 == 0) {
   800  004C  2860               	goto	i1l767
   801  004D                     i1l64:
   802  004D  1B86               	btfsc	6,7	;volatile
   803  004E  2850               	goto	u8_21
   804  004F  2851               	goto	u8_20
   805  0050                     u8_21:
   806  0050  2860               	goto	i1l767
   807  0051                     u8_20:
   808  0051  2858               	goto	i1l761
   809  0052                     i1l72:
   810                           
   811                           ;main.c: 115:                 if (PORTBbits.RB7 == 1) {
   812  0052  1F86               	btfss	6,7	;volatile
   813  0053  2855               	goto	u9_21
   814  0054  2856               	goto	u9_20
   815  0055                     u9_21:
   816  0055  2858               	goto	i1l761
   817  0056                     u9_20:
   818  0056                     i1l759:
   819                           
   820                           ;main.c: 116:                     flag2 = 1;
   821  0056  01F6               	clrf	_flag2
   822  0057  0AF6               	incf	_flag2,f
   823  0058                     i1l761:
   824                           
   825                           ;main.c: 114:             while (flag2 == 0) {
   826  0058  0876               	movf	_flag2,w
   827  0059  1903               	btfsc	3,2
   828  005A  285C               	goto	u10_21
   829  005B  285D               	goto	u10_20
   830  005C                     u10_21:
   831  005C  2852               	goto	i1l72
   832  005D                     u10_20:
   833  005D                     i1l763:
   834                           
   835                           ;main.c: 119:             flag2 = 0;
   836  005D  01F6               	clrf	_flag2
   837  005E                     i1l765:
   838                           
   839                           ;main.c: 120:             count--;
   840  005E  3001               	movlw	1
   841  005F  02F7               	subwf	_count,f
   842  0060                     i1l767:
   843                           
   844                           ;main.c: 124:     INTCONbits.RBIF = 0;
   845  0060  100B               	bcf	11,0	;volatile
   846  0061                     i1l75:
   847  0061  0873               	movf	??_ISR+2,w
   848  0062  008A               	movwf	10
   849  0063  0E72               	swapf	??_ISR+1,w
   850  0064  0083               	movwf	3
   851  0065  0EFE               	swapf	btemp,f
   852  0066  0E7E               	swapf	btemp,w
   853  0067  0009               	retfie
   854  0068                     __end_of_ISR:
   855                           
   856                           	psect	intentry
   857  0004                     __pintentry:	
   858                           ;incstack = 0
   859                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
   860                           
   861  0004                     interrupt_function:
   862  007E                     saved_w	set	btemp
   863  0004  00FE               	movwf	btemp
   864  0005  0E03               	swapf	3,w
   865  0006  00F2               	movwf	??_ISR+1
   866  0007  080A               	movf	10,w
   867  0008  00F3               	movwf	??_ISR+2
   868  0009  120A  118A  281C   	ljmp	_ISR
   869                           
   870                           	psect	text4
   871  00C2                     __ptext4:	
   872 ;; *************** function _spiWrite *****************
   873 ;; Defined at:
   874 ;;		line 35 in file "SPI.c"
   875 ;; Parameters:    Size  Location     Type
   876 ;;  dat             1    wreg     unsigned char 
   877 ;; Auto vars:     Size  Location     Type
   878 ;;  dat             1    0[COMMON] unsigned char 
   879 ;; Return value:  Size  Location     Type
   880 ;;                  1    wreg      void 
   881 ;; Registers used:
   882 ;;		wreg
   883 ;; Tracked objects:
   884 ;;		On entry : 0/0
   885 ;;		On exit  : 0/0
   886 ;;		Unchanged: 0/0
   887 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   888 ;;      Params:         0       0       0       0       0
   889 ;;      Locals:         1       0       0       0       0
   890 ;;      Temps:          0       0       0       0       0
   891 ;;      Totals:         1       0       0       0       0
   892 ;;Total ram usage:        1 bytes
   893 ;; Hardware stack levels used:    1
   894 ;; This function calls:
   895 ;;		Nothing
   896 ;; This function is called by:
   897 ;;		_ISR
   898 ;; This function uses a non-reentrant model
   899 ;;
   900                           
   901                           
   902                           ;psect for function _spiWrite
   903  00C2                     _spiWrite:
   904                           
   905                           ;incstack = 0
   906                           ; Regs used in _spiWrite: [wreg]
   907                           ;spiWrite@dat stored from wreg
   908  00C2  00F0               	movwf	spiWrite@dat
   909  00C3                     i1l725:
   910                           
   911                           ;SPI.c: 35: void spiWrite(char dat);SPI.c: 36: {;SPI.c: 37:     SSPBUF = dat;
   912  00C3  0870               	movf	spiWrite@dat,w
   913  00C4  1283               	bcf	3,5	;RP0=0, select bank0
   914  00C5  1303               	bcf	3,6	;RP1=0, select bank0
   915  00C6  0093               	movwf	19	;volatile
   916  00C7                     i1l97:
   917  00C7  0008               	return
   918  00C8                     __end_of_spiWrite:
   919                           
   920                           	psect	text5
   921  00B2                     __ptext5:	
   922 ;; *************** function _spiRead *****************
   923 ;; Defined at:
   924 ;;		line 48 in file "SPI.c"
   925 ;; Parameters:    Size  Location     Type
   926 ;;		None
   927 ;; Auto vars:     Size  Location     Type
   928 ;;		None
   929 ;; Return value:  Size  Location     Type
   930 ;;                  1    wreg      unsigned char 
   931 ;; Registers used:
   932 ;;		wreg, status,2, status,0, pclath, cstack
   933 ;; Tracked objects:
   934 ;;		On entry : 0/0
   935 ;;		On exit  : 0/0
   936 ;;		Unchanged: 0/0
   937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   938 ;;      Params:         0       0       0       0       0
   939 ;;      Locals:         0       0       0       0       0
   940 ;;      Temps:          0       0       0       0       0
   941 ;;      Totals:         0       0       0       0       0
   942 ;;Total ram usage:        0 bytes
   943 ;; Hardware stack levels used:    1
   944 ;; Hardware stack levels required when called:    1
   945 ;; This function calls:
   946 ;;		_spiReceiveWait
   947 ;; This function is called by:
   948 ;;		_ISR
   949 ;; This function uses a non-reentrant model
   950 ;;
   951                           
   952                           
   953                           ;psect for function _spiRead
   954  00B2                     _spiRead:
   955  00B2                     i1l719:	
   956                           ;incstack = 0
   957                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
   958                           
   959                           
   960                           ;SPI.c: 50:     spiReceiveWait();
   961  00B2  120A  118A  20BB  120A  118A  	fcall	_spiReceiveWait
   962  00B7                     i1l721:
   963                           
   964                           ;SPI.c: 51:     return(SSPBUF);
   965  00B7  1283               	bcf	3,5	;RP0=0, select bank0
   966  00B8  1303               	bcf	3,6	;RP1=0, select bank0
   967  00B9  0813               	movf	19,w	;volatile
   968  00BA                     i1l105:
   969  00BA  0008               	return
   970  00BB                     __end_of_spiRead:
   971                           
   972                           	psect	text6
   973  00BB                     __ptext6:	
   974 ;; *************** function _spiReceiveWait *****************
   975 ;; Defined at:
   976 ;;		line 30 in file "SPI.c"
   977 ;; Parameters:    Size  Location     Type
   978 ;;		None
   979 ;; Auto vars:     Size  Location     Type
   980 ;;		None
   981 ;; Return value:  Size  Location     Type
   982 ;;                  1    wreg      void 
   983 ;; Registers used:
   984 ;;		None
   985 ;; Tracked objects:
   986 ;;		On entry : 0/0
   987 ;;		On exit  : 0/0
   988 ;;		Unchanged: 0/0
   989 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   990 ;;      Params:         0       0       0       0       0
   991 ;;      Locals:         0       0       0       0       0
   992 ;;      Temps:          0       0       0       0       0
   993 ;;      Totals:         0       0       0       0       0
   994 ;;Total ram usage:        0 bytes
   995 ;; Hardware stack levels used:    1
   996 ;; This function calls:
   997 ;;		Nothing
   998 ;; This function is called by:
   999 ;;		_spiRead
  1000 ;; This function uses a non-reentrant model
  1001 ;;
  1002                           
  1003                           
  1004                           ;psect for function _spiReceiveWait
  1005  00BB                     _spiReceiveWait:
  1006  00BB                     i1l697:	
  1007                           ;incstack = 0
  1008                           ; Regs used in _spiReceiveWait: []
  1009                           
  1010  00BB                     i1l91:	
  1011                           ;SPI.c: 32:     while ( !SSPSTATbits.BF );
  1012                           
  1013  00BB  1683               	bsf	3,5	;RP0=1, select bank1
  1014  00BC  1303               	bcf	3,6	;RP1=0, select bank1
  1015  00BD  1C14               	btfss	20,0	;volatile
  1016  00BE  28C0               	goto	u1_21
  1017  00BF  28C1               	goto	u1_20
  1018  00C0                     u1_21:
  1019  00C0  28BB               	goto	i1l91
  1020  00C1                     u1_20:
  1021  00C1                     i1l94:
  1022  00C1  0008               	return
  1023  00C2                     __end_of_spiReceiveWait:
  1024  007E                     btemp	set	126	;btemp
  1025  007E                     wtemp0	set	126
  1026                           
  1027                           	psect	config
  1028                           
  1029                           ;Config register CONFIG1 @ 0x2007
  1030                           ;	Oscillator Selection bits
  1031                           ;	FOSC = INTRC_CLKOUT, INTOSC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, I/O fu
      +                          nction on RA7/OSC1/CLKIN
  1032                           ;	Watchdog Timer Enable bit
  1033                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1034                           ;	Power-up Timer Enable bit
  1035                           ;	PWRTE = OFF, PWRT disabled
  1036                           ;	RE3/MCLR pin function select bit
  1037                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  1038                           ;	Code Protection bit
  1039                           ;	CP = OFF, Program memory code protection is disabled
  1040                           ;	Data Code Protection bit
  1041                           ;	CPD = OFF, Data memory code protection is disabled
  1042                           ;	Brown Out Reset Selection bits
  1043                           ;	BOREN = OFF, BOR disabled
  1044                           ;	Internal External Switchover bit
  1045                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1046                           ;	Fail-Safe Clock Monitor Enabled bit
  1047                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1048                           ;	Low Voltage Programming Enable bit
  1049                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1050                           ;	In-Circuit Debugger Mode bit
  1051                           ;	DEBUG = 0x1, unprogrammed default
  1052  2007                     	org	8199
  1053  2007  20D5               	dw	8405
  1054                           
  1055                           ;Config register CONFIG2 @ 0x2008
  1056                           ;	Brown-out Reset Selection bit
  1057                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1058                           ;	Flash Program Memory Self Write Enable bits
  1059                           ;	WRT = OFF, Write protection off
  1060  2008                     	org	8200
  1061  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5       9
    BANK0            80      3       3
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_spiInit

Critical Paths under _ISR in COMMON

    _ISR->_spiWrite

Critical Paths under _main in BANK0

    _main->_spiInit

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     456
                              _setup
                            _spiInit
 ---------------------------------------------------------------------------------
 (1) _spiInit                                              4     1      3     456
                                              4 COMMON     1     1      0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  3     3      0      15
                                              1 COMMON     3     3      0
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (3) _spiWrite                                             1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (4) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup
   _spiInit

 _ISR (ROOT)
   _spiRead
     _spiReceiveWait
   _spiWrite

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      3       3       5        3.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       9       1       64.3%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0       C      12        0.0%
ABS                  0      0       C       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Thu Feb 18 00:55:32 2021

                      _a 0075              _SSPSTATbits 0094                       l57 00B1  
                     l87 0096                       l88 009B                      l701 009F  
                    l711 00AF                      l703 00A1                      l705 00A3  
                    l801 006E                      l707 00A5                      l803 0070  
                    l709 00A6                      l805 007B                      l791 0084  
                    l793 0088                      l699 009C                      l795 008F  
                    l797 0068                      l799 006D                      u120 0088  
                    u121 0087                      _ISR 001C                     ?_ISR 0070  
                   i1l72 0052                     i1l64 004D                     i1l66 003C  
                   i1l91 00BB                     i1l75 0061                     i1l94 00C1  
                   i1l97 00C7                     u1_20 00C1                     u1_21 00C0  
                   u3_20 0022                     u3_21 0021                     u4_20 0037  
                   u4_21 0036                     u5_20 003B                     u5_21 003A  
                   u6_20 0040                     u6_21 003F                     u7_20 0047  
                   u7_21 0046                     u8_20 0051                     u8_21 0050  
                   u9_20 0056                     u9_21 0055                     _flag 0078  
                   _main 0068                     btemp 007E                     start 000C  
                  ??_ISR 0071                    ?_main 0070                    i1l105 00BA  
                  i1l721 00B7                    i1l725 00C3                    i1l741 0030  
                  i1l719 00B2                    i1l751 0042                    i1l743 0033  
                  i1l761 0058                    i1l753 0047                    i1l745 0037  
                  i1l737 001C                    i1l763 005D                    i1l755 0048  
                  i1l739 0022                    i1l765 005E                    i1l749 0040  
                  i1l759 0056                    i1l767 0060                    i1l697 00BB  
                  u10_20 005D                    u10_21 005C                    _PORTA 0005  
                  _PORTB 0006                    _PORTC 0007                    _PORTD 0008  
                  _PORTE 0009                    _TRISB 0086                    _TRISC 0087  
                  _TRISD 0088                    _TRISE 0089                    _SSPIF 0063  
                  _flag2 0076                    _count 0077                    _setup 009C  
                  pclath 000A          __end_of_spiInit 009C          __end_of_spiRead 00BB  
                  status 0003                    wtemp0 007E          __initialization 000F  
           __end_of_main 0083                   ??_main 0075                   ?_setup 0070  
                 _INTCON 000B                   _SSPCON 0014                   _SSPBUF 0013  
           __pdataCOMMON 0078                   saved_w 007E         __end_of_spiWrite 00C8  
              ??_spiInit 0074                ??_spiRead 0070  __end_of__initialization 0018  
         __pcstackCOMMON 0070            __end_of_setup 00B2                  ??_setup 0074  
             __pmaintext 0068               __pintentry 0004  __size_of_spiReceiveWait 0007  
                _SSPSTAT 0094                ?_spiWrite 0070                  __ptext1 0083  
                __ptext2 009C                  __ptext3 001C                  __ptext4 00C2  
                __ptext5 00B2                  __ptext6 00BB             __size_of_ISR 004C  
                _spiInit 0083                  _spiRead 00B2     end_of_initialization 0018  
             ??_spiWrite 0070                _PORTBbits 0006                _TRISAbits 0085  
            spiWrite@dat 0070           _spiReceiveWait 00BB            __pidataCOMMON 00C8  
    start_initialization 000F              __end_of_ISR 0068   __end_of_spiReceiveWait 00C2  
            __pbssCOMMON 0075                ___latbits 0002            __pcstackBANK0 0020  
        ?_spiReceiveWait 0070        __size_of_spiWrite 0006                 ?_spiInit 0020  
               ?_spiRead 0070           __size_of_setup 0016     spiInit@sTransmitEdge 0022  
      interrupt_function 0004                 _IOCBbits 0096       spiInit@sDataSample 0020  
       __size_of_spiInit 0019         __size_of_spiRead 0009            __size_of_main 001B  
               _spiWrite 00C2             spiInit@sType 0074        spiInit@sClockIdle 0021  
             _INTCONbits 000B                 intlevel1 0000         ??_spiReceiveWait 0070  
