

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Thu Feb 18 21:36:55 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,merge=1,delta=2
     6                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	maintext,global,class=CODE,split=1,delta=2
    11                           	psect	text1,local,class=CODE,merge=1,delta=2
    12                           	psect	text2,local,class=CODE,merge=1,delta=2
    13                           	psect	text3,local,class=CODE,merge=1,delta=2
    14                           	psect	intentry,global,class=CODE,delta=2
    15                           	psect	text4,local,class=CODE,merge=1,delta=2
    16                           	psect	text5,local,class=CODE,merge=1,delta=2
    17                           	psect	text6,local,class=CODE,merge=1,delta=2
    18                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    19                           	dabs	1,0x7E,2
    20  0000                     
    21                           ; Version 2.20
    22                           ; Generated 12/02/2020 GMT
    23                           ; 
    24                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    25                           ; All rights reserved.
    26                           ; 
    27                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    28                           ; 
    29                           ; Redistribution and use in source and binary forms, with or without modification, are
    30                           ; permitted provided that the following conditions are met:
    31                           ; 
    32                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    33                           ;        conditions and the following disclaimer.
    34                           ; 
    35                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    36                           ;        of conditions and the following disclaimer in the documentation and/or other
    37                           ;        materials provided with the distribution.
    38                           ; 
    39                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    40                           ;        software without specific prior written permission.
    41                           ; 
    42                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    43                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    44                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    45                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    46                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    47                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    48                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    49                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    50                           ; 
    51                           ; 
    52                           ; Code-generator required, PIC16F887 Definitions
    53                           ; 
    54                           ; SFR Addresses
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  0007                     	;# 
    63  0008                     	;# 
    64  0009                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  000D                     	;# 
    69  000E                     	;# 
    70  000E                     	;# 
    71  000F                     	;# 
    72  0010                     	;# 
    73  0011                     	;# 
    74  0012                     	;# 
    75  0013                     	;# 
    76  0014                     	;# 
    77  0015                     	;# 
    78  0015                     	;# 
    79  0016                     	;# 
    80  0017                     	;# 
    81  0018                     	;# 
    82  0019                     	;# 
    83  001A                     	;# 
    84  001B                     	;# 
    85  001B                     	;# 
    86  001C                     	;# 
    87  001D                     	;# 
    88  001E                     	;# 
    89  001F                     	;# 
    90  0081                     	;# 
    91  0085                     	;# 
    92  0086                     	;# 
    93  0087                     	;# 
    94  0088                     	;# 
    95  0089                     	;# 
    96  008C                     	;# 
    97  008D                     	;# 
    98  008E                     	;# 
    99  008F                     	;# 
   100  0090                     	;# 
   101  0091                     	;# 
   102  0092                     	;# 
   103  0093                     	;# 
   104  0093                     	;# 
   105  0093                     	;# 
   106  0094                     	;# 
   107  0095                     	;# 
   108  0096                     	;# 
   109  0097                     	;# 
   110  0098                     	;# 
   111  0099                     	;# 
   112  009A                     	;# 
   113  009B                     	;# 
   114  009C                     	;# 
   115  009D                     	;# 
   116  009E                     	;# 
   117  009F                     	;# 
   118  0105                     	;# 
   119  0107                     	;# 
   120  0108                     	;# 
   121  0109                     	;# 
   122  010C                     	;# 
   123  010C                     	;# 
   124  010D                     	;# 
   125  010E                     	;# 
   126  010F                     	;# 
   127  0185                     	;# 
   128  0187                     	;# 
   129  0188                     	;# 
   130  0189                     	;# 
   131  018C                     	;# 
   132  018D                     	;# 
   133  0000                     	;# 
   134  0001                     	;# 
   135  0002                     	;# 
   136  0003                     	;# 
   137  0004                     	;# 
   138  0005                     	;# 
   139  0006                     	;# 
   140  0007                     	;# 
   141  0008                     	;# 
   142  0009                     	;# 
   143  000A                     	;# 
   144  000B                     	;# 
   145  000C                     	;# 
   146  000D                     	;# 
   147  000E                     	;# 
   148  000E                     	;# 
   149  000F                     	;# 
   150  0010                     	;# 
   151  0011                     	;# 
   152  0012                     	;# 
   153  0013                     	;# 
   154  0014                     	;# 
   155  0015                     	;# 
   156  0015                     	;# 
   157  0016                     	;# 
   158  0017                     	;# 
   159  0018                     	;# 
   160  0019                     	;# 
   161  001A                     	;# 
   162  001B                     	;# 
   163  001B                     	;# 
   164  001C                     	;# 
   165  001D                     	;# 
   166  001E                     	;# 
   167  001F                     	;# 
   168  0081                     	;# 
   169  0085                     	;# 
   170  0086                     	;# 
   171  0087                     	;# 
   172  0088                     	;# 
   173  0089                     	;# 
   174  008C                     	;# 
   175  008D                     	;# 
   176  008E                     	;# 
   177  008F                     	;# 
   178  0090                     	;# 
   179  0091                     	;# 
   180  0092                     	;# 
   181  0093                     	;# 
   182  0093                     	;# 
   183  0093                     	;# 
   184  0094                     	;# 
   185  0095                     	;# 
   186  0096                     	;# 
   187  0097                     	;# 
   188  0098                     	;# 
   189  0099                     	;# 
   190  009A                     	;# 
   191  009B                     	;# 
   192  009C                     	;# 
   193  009D                     	;# 
   194  009E                     	;# 
   195  009F                     	;# 
   196  0105                     	;# 
   197  0107                     	;# 
   198  0108                     	;# 
   199  0109                     	;# 
   200  010C                     	;# 
   201  010C                     	;# 
   202  010D                     	;# 
   203  010E                     	;# 
   204  010F                     	;# 
   205  0185                     	;# 
   206  0187                     	;# 
   207  0188                     	;# 
   208  0189                     	;# 
   209  018C                     	;# 
   210  018D                     	;# 
   211  0000                     	;# 
   212  0001                     	;# 
   213  0002                     	;# 
   214  0003                     	;# 
   215  0004                     	;# 
   216  0005                     	;# 
   217  0006                     	;# 
   218  0007                     	;# 
   219  0008                     	;# 
   220  0009                     	;# 
   221  000A                     	;# 
   222  000B                     	;# 
   223  000C                     	;# 
   224  000D                     	;# 
   225  000E                     	;# 
   226  000E                     	;# 
   227  000F                     	;# 
   228  0010                     	;# 
   229  0011                     	;# 
   230  0012                     	;# 
   231  0013                     	;# 
   232  0014                     	;# 
   233  0015                     	;# 
   234  0015                     	;# 
   235  0016                     	;# 
   236  0017                     	;# 
   237  0018                     	;# 
   238  0019                     	;# 
   239  001A                     	;# 
   240  001B                     	;# 
   241  001B                     	;# 
   242  001C                     	;# 
   243  001D                     	;# 
   244  001E                     	;# 
   245  001F                     	;# 
   246  0081                     	;# 
   247  0085                     	;# 
   248  0086                     	;# 
   249  0087                     	;# 
   250  0088                     	;# 
   251  0089                     	;# 
   252  008C                     	;# 
   253  008D                     	;# 
   254  008E                     	;# 
   255  008F                     	;# 
   256  0090                     	;# 
   257  0091                     	;# 
   258  0092                     	;# 
   259  0093                     	;# 
   260  0093                     	;# 
   261  0093                     	;# 
   262  0094                     	;# 
   263  0095                     	;# 
   264  0096                     	;# 
   265  0097                     	;# 
   266  0098                     	;# 
   267  0099                     	;# 
   268  009A                     	;# 
   269  009B                     	;# 
   270  009C                     	;# 
   271  009D                     	;# 
   272  009E                     	;# 
   273  009F                     	;# 
   274  0105                     	;# 
   275  0107                     	;# 
   276  0108                     	;# 
   277  0109                     	;# 
   278  010C                     	;# 
   279  010C                     	;# 
   280  010D                     	;# 
   281  010E                     	;# 
   282  010F                     	;# 
   283  0185                     	;# 
   284  0187                     	;# 
   285  0188                     	;# 
   286  0189                     	;# 
   287  018C                     	;# 
   288  018D                     	;# 
   289                           
   290                           	psect	idataCOMMON
   291  00CC                     __pidataCOMMON:
   292                           
   293                           ;initializer for _flag
   294  00CC  3401               	retlw	1
   295  0013                     _SSPBUF	set	19
   296  0014                     _SSPCON	set	20
   297  0006                     _PORTBbits	set	6
   298  000B                     _INTCONbits	set	11
   299  000C                     _PIR1bits	set	12
   300  000B                     _INTCON	set	11
   301  0009                     _PORTE	set	9
   302  0007                     _PORTC	set	7
   303  0006                     _PORTB	set	6
   304  0008                     _PORTD	set	8
   305  0094                     _SSPSTATbits	set	148
   306  0094                     _SSPSTAT	set	148
   307  0096                     _IOCBbits	set	150
   308  0089                     _TRISE	set	137
   309  0086                     _TRISB	set	134
   310  0087                     _TRISC	set	135
   311  0088                     _TRISD	set	136
   312  0085                     _TRISAbits	set	133
   313  043B                     _TRISC3	set	1083
   314  043D                     _TRISC5	set	1085
   315                           
   316                           	psect	cinit
   317  000F                     start_initialization:	
   318                           ; #config settings
   319                           
   320  000F                     __initialization:
   321                           
   322                           ; Initialize objects allocated to COMMON
   323  000F  120A  118A  20CC  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   324  0014  00F8               	movwf	__pdataCOMMON& (0+127)
   325                           
   326                           ; Clear objects allocated to COMMON
   327  0015  01F5               	clrf	__pbssCOMMON& (0+127)
   328  0016  01F6               	clrf	(__pbssCOMMON+1)& (0+127)
   329  0017  01F7               	clrf	(__pbssCOMMON+2)& (0+127)
   330  0018                     end_of_initialization:	
   331                           ;End of C runtime variable initialization code
   332                           
   333  0018                     __end_of__initialization:
   334  0018  0183               	clrf	3
   335  0019  120A  118A  2886   	ljmp	_main	;jump to C main() function
   336                           
   337                           	psect	bssCOMMON
   338  0075                     __pbssCOMMON:
   339  0075                     _a:
   340  0075                     	ds	1
   341  0076                     _flag2:
   342  0076                     	ds	1
   343  0077                     _count:
   344  0077                     	ds	1
   345                           
   346                           	psect	dataCOMMON
   347  0078                     __pdataCOMMON:
   348  0078                     _flag:
   349  0078                     	ds	1
   350                           
   351                           	psect	cstackCOMMON
   352  0070                     __pcstackCOMMON:
   353  0070                     ?_setup:
   354  0070                     ?_spiRead:	
   355                           ; 1 bytes @ 0x0
   356                           
   357  0070                     ??_spiRead:	
   358                           ; 1 bytes @ 0x0
   359                           
   360  0070                     ?_spiWrite:	
   361                           ; 1 bytes @ 0x0
   362                           
   363  0070                     ??_spiWrite:	
   364                           ; 1 bytes @ 0x0
   365                           
   366  0070                     ?_main:	
   367                           ; 1 bytes @ 0x0
   368                           
   369  0070                     ?_ISR:	
   370                           ; 1 bytes @ 0x0
   371                           
   372  0070                     ?_spiReceiveWait:	
   373                           ; 1 bytes @ 0x0
   374                           
   375  0070                     ??_spiReceiveWait:	
   376                           ; 1 bytes @ 0x0
   377                           
   378  0070                     spiWrite@dat:	
   379                           ; 1 bytes @ 0x0
   380                           
   381                           
   382                           ; 1 bytes @ 0x0
   383  0070                     	ds	1
   384  0071                     ??_ISR:
   385                           
   386                           ; 1 bytes @ 0x1
   387  0071                     	ds	3
   388  0074                     ??_setup:
   389  0074                     ??_spiInit:	
   390                           ; 1 bytes @ 0x4
   391                           
   392  0074                     spiInit@sType:	
   393                           ; 1 bytes @ 0x4
   394                           
   395                           
   396                           ; 1 bytes @ 0x4
   397  0074                     	ds	1
   398  0075                     ??_main:
   399                           
   400                           	psect	cstackBANK0
   401  0020                     __pcstackBANK0:	
   402                           ; 1 bytes @ 0x5
   403                           
   404  0020                     ?_spiInit:
   405  0020                     spiInit@sDataSample:	
   406                           ; 1 bytes @ 0x0
   407                           
   408                           
   409                           ; 1 bytes @ 0x0
   410  0020                     	ds	1
   411  0021                     spiInit@sClockIdle:
   412                           
   413                           ; 1 bytes @ 0x1
   414  0021                     	ds	1
   415  0022                     spiInit@sTransmitEdge:
   416                           
   417                           ; 1 bytes @ 0x2
   418  0022                     	ds	1
   419                           
   420                           	psect	maintext
   421  0086                     __pmaintext:	
   422 ;;
   423 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   424 ;;
   425 ;; *************** function _main *****************
   426 ;; Defined at:
   427 ;;		line 53 in file "main.c"
   428 ;; Parameters:    Size  Location     Type
   429 ;;		None
   430 ;; Auto vars:     Size  Location     Type
   431 ;;		None
   432 ;; Return value:  Size  Location     Type
   433 ;;                  1    wreg      void 
   434 ;; Registers used:
   435 ;;		wreg, status,2, status,0, pclath, cstack
   436 ;; Tracked objects:
   437 ;;		On entry : B00/0
   438 ;;		On exit  : 0/0
   439 ;;		Unchanged: 0/0
   440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   441 ;;      Params:         0       0       0       0       0
   442 ;;      Locals:         0       0       0       0       0
   443 ;;      Temps:          0       0       0       0       0
   444 ;;      Totals:         0       0       0       0       0
   445 ;;Total ram usage:        0 bytes
   446 ;; Hardware stack levels required when called:    4
   447 ;; This function calls:
   448 ;;		_setup
   449 ;;		_spiInit
   450 ;; This function is called by:
   451 ;;		Startup code after reset
   452 ;; This function uses a non-reentrant model
   453 ;;
   454                           
   455                           
   456                           ;psect for function _main
   457  0086                     _main:
   458  0086                     l811:	
   459                           ;incstack = 0
   460                           ; Regs used in _main: [wreg+status,2+status,0+pclath+cstack]
   461                           
   462                           
   463                           ;main.c: 54:     setup();
   464  0086  120A  118A  20A1  120A  118A  	fcall	_setup
   465  008B                     l813:
   466                           
   467                           ;main.c: 55:     count = 0;
   468  008B  01F7               	clrf	_count
   469  008C                     l815:
   470                           
   471                           ;main.c: 56:     flag = 1;
   472  008C  01F8               	clrf	_flag
   473  008D  0AF8               	incf	_flag,f
   474  008E                     l817:
   475                           
   476                           ;main.c: 57:     spiInit(SPI_SLAVE_SS_EN, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_LOW, SP
      +                          I_IDLE_2_ACTIVE);
   477  008E  1283               	bcf	3,5	;RP0=0, select bank0
   478  008F  1303               	bcf	3,6	;RP1=0, select bank0
   479  0090  01A0               	clrf	spiInit@sDataSample
   480  0091  01A1               	clrf	spiInit@sClockIdle
   481  0092  01A2               	clrf	spiInit@sTransmitEdge
   482  0093  3024               	movlw	36
   483  0094  120A  118A  2068  120A  118A  	fcall	_spiInit
   484  0099                     l819:
   485                           
   486                           ;main.c: 61:         PORTD = count;
   487  0099  0877               	movf	_count,w
   488  009A  1283               	bcf	3,5	;RP0=0, select bank0
   489  009B  1303               	bcf	3,6	;RP1=0, select bank0
   490  009C  0088               	movwf	8	;volatile
   491  009D  2899               	goto	l819
   492  009E  120A  118A  280C   	ljmp	start
   493  00A1                     __end_of_main:
   494                           
   495                           	psect	text1
   496  0068                     __ptext1:	
   497 ;; *************** function _spiInit *****************
   498 ;; Defined at:
   499 ;;		line 13 in file "SPI.c"
   500 ;; Parameters:    Size  Location     Type
   501 ;;  sType           1    wreg     enum E1264
   502 ;;  sDataSample     1    0[BANK0 ] enum E1272
   503 ;;  sClockIdle      1    1[BANK0 ] enum E1276
   504 ;;  sTransmitEdg    1    2[BANK0 ] enum E1280
   505 ;; Auto vars:     Size  Location     Type
   506 ;;  sType           1    4[COMMON] enum E1264
   507 ;; Return value:  Size  Location     Type
   508 ;;                  1    wreg      void 
   509 ;; Registers used:
   510 ;;		wreg, status,2, status,0
   511 ;; Tracked objects:
   512 ;;		On entry : 0/0
   513 ;;		On exit  : 0/0
   514 ;;		Unchanged: 0/0
   515 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   516 ;;      Params:         0       3       0       0       0
   517 ;;      Locals:         1       0       0       0       0
   518 ;;      Temps:          0       0       0       0       0
   519 ;;      Totals:         1       3       0       0       0
   520 ;;Total ram usage:        4 bytes
   521 ;; Hardware stack levels used:    1
   522 ;; Hardware stack levels required when called:    3
   523 ;; This function calls:
   524 ;;		Nothing
   525 ;; This function is called by:
   526 ;;		_main
   527 ;; This function uses a non-reentrant model
   528 ;;
   529                           
   530                           
   531                           ;psect for function _spiInit
   532  0068                     _spiInit:
   533                           
   534                           ;incstack = 0
   535                           ; Regs used in _spiInit: [wreg+status,2+status,0]
   536                           ;spiInit@sType stored from wreg
   537  0068  00F4               	movwf	spiInit@sType
   538  0069                     l801:
   539                           
   540                           ;SPI.c: 13: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 14: {;SPI.c: 15:     TRISC5 = 0;
   541  0069  1683               	bsf	3,5	;RP0=1, select bank1
   542  006A  1303               	bcf	3,6	;RP1=0, select bank1
   543  006B  1287               	bcf	7,5	;volatile
   544                           
   545                           ;SPI.c: 16:     if(sType & 0b00000100)
   546  006C  1D74               	btfss	spiInit@sType,2
   547  006D  286F               	goto	u121
   548  006E  2870               	goto	u120
   549  006F                     u121:
   550  006F  2878               	goto	l807
   551  0070                     u120:
   552  0070                     l803:
   553                           
   554                           ;SPI.c: 17:     {;SPI.c: 18:         SSPSTAT = sTransmitEdge;
   555  0070  1283               	bcf	3,5	;RP0=0, select bank0
   556  0071  1303               	bcf	3,6	;RP1=0, select bank0
   557  0072  0822               	movf	spiInit@sTransmitEdge,w
   558  0073  1683               	bsf	3,5	;RP0=1, select bank1
   559  0074  1303               	bcf	3,6	;RP1=0, select bank1
   560  0075  0094               	movwf	20	;volatile
   561  0076                     l805:
   562                           
   563                           ;SPI.c: 19:         TRISC3 = 1;
   564  0076  1587               	bsf	7,3	;volatile
   565                           
   566                           ;SPI.c: 20:     }
   567  0077  2880               	goto	l89
   568  0078                     l807:
   569                           
   570                           ;SPI.c: 22:     {;SPI.c: 23:         SSPSTAT = sDataSample | sTransmitEdge;
   571  0078  1283               	bcf	3,5	;RP0=0, select bank0
   572  0079  1303               	bcf	3,6	;RP1=0, select bank0
   573  007A  0820               	movf	spiInit@sDataSample,w
   574  007B  0422               	iorwf	spiInit@sTransmitEdge,w
   575  007C  1683               	bsf	3,5	;RP0=1, select bank1
   576  007D  1303               	bcf	3,6	;RP1=0, select bank1
   577  007E  0094               	movwf	20	;volatile
   578  007F                     l809:
   579                           
   580                           ;SPI.c: 24:         TRISC3 = 0;
   581  007F  1187               	bcf	7,3	;volatile
   582  0080                     l89:	
   583                           ;SPI.c: 25:     }
   584                           
   585                           
   586                           ;SPI.c: 27:     SSPCON = sType | sClockIdle;
   587  0080  0874               	movf	spiInit@sType,w
   588  0081  1283               	bcf	3,5	;RP0=0, select bank0
   589  0082  1303               	bcf	3,6	;RP1=0, select bank0
   590  0083  0421               	iorwf	spiInit@sClockIdle,w
   591  0084  0094               	movwf	20	;volatile
   592  0085                     l90:
   593  0085  0008               	return
   594  0086                     __end_of_spiInit:
   595                           
   596                           	psect	text2
   597  00A1                     __ptext2:	
   598 ;; *************** function _setup *****************
   599 ;; Defined at:
   600 ;;		line 74 in file "main.c"
   601 ;; Parameters:    Size  Location     Type
   602 ;;		None
   603 ;; Auto vars:     Size  Location     Type
   604 ;;		None
   605 ;; Return value:  Size  Location     Type
   606 ;;                  1    wreg      void 
   607 ;; Registers used:
   608 ;;		wreg, status,2
   609 ;; Tracked objects:
   610 ;;		On entry : 0/0
   611 ;;		On exit  : 0/0
   612 ;;		Unchanged: 0/0
   613 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   614 ;;      Params:         0       0       0       0       0
   615 ;;      Locals:         0       0       0       0       0
   616 ;;      Temps:          0       0       0       0       0
   617 ;;      Totals:         0       0       0       0       0
   618 ;;Total ram usage:        0 bytes
   619 ;; Hardware stack levels used:    1
   620 ;; Hardware stack levels required when called:    3
   621 ;; This function calls:
   622 ;;		Nothing
   623 ;; This function is called by:
   624 ;;		_main
   625 ;; This function uses a non-reentrant model
   626 ;;
   627                           
   628                           
   629                           ;psect for function _setup
   630  00A1                     _setup:
   631  00A1                     l701:	
   632                           ;incstack = 0
   633                           ; Regs used in _setup: [wreg+status,2]
   634                           
   635                           
   636                           ;main.c: 75:     TRISAbits.TRISA5 = 1;
   637  00A1  1683               	bsf	3,5	;RP0=1, select bank1
   638  00A2  1303               	bcf	3,6	;RP1=0, select bank1
   639  00A3  1685               	bsf	5,5	;volatile
   640  00A4                     l703:
   641                           
   642                           ;main.c: 77:     TRISD = 0b00000000;
   643  00A4  0188               	clrf	8	;volatile
   644  00A5                     l705:
   645                           
   646                           ;main.c: 78:     TRISC = 0b00011000;
   647  00A5  3018               	movlw	24
   648  00A6  0087               	movwf	7	;volatile
   649  00A7                     l707:
   650                           
   651                           ;main.c: 81:     TRISB = 0b11111110;
   652  00A7  30FE               	movlw	254
   653  00A8  0086               	movwf	6	;volatile
   654                           
   655                           ;main.c: 84:     TRISE = 0b00000000;
   656  00A9  0189               	clrf	9	;volatile
   657  00AA                     l709:
   658                           
   659                           ;main.c: 85:     IOCBbits.IOCB6 = 1;
   660  00AA  1716               	bsf	22,6	;volatile
   661  00AB                     l711:
   662                           
   663                           ;main.c: 86:     IOCBbits.IOCB7 = 1;
   664  00AB  1796               	bsf	22,7	;volatile
   665                           
   666                           ;main.c: 87:     PORTB = 0;
   667  00AC  1283               	bcf	3,5	;RP0=0, select bank0
   668  00AD  1303               	bcf	3,6	;RP1=0, select bank0
   669  00AE  0186               	clrf	6	;volatile
   670                           
   671                           ;main.c: 88:     PORTC = 0;
   672  00AF  0187               	clrf	7	;volatile
   673                           
   674                           ;main.c: 89:     PORTD = 0;
   675  00B0  0188               	clrf	8	;volatile
   676                           
   677                           ;main.c: 91:     PORTE = 0;
   678  00B1  0189               	clrf	9	;volatile
   679                           
   680                           ;main.c: 92:     flag2 = 0;
   681  00B2  01F6               	clrf	_flag2
   682  00B3                     l713:
   683                           
   684                           ;main.c: 93:     INTCON = 0b11101000;
   685  00B3  30E8               	movlw	232
   686  00B4  008B               	movwf	11	;volatile
   687  00B5                     l55:
   688  00B5  0008               	return
   689  00B6                     __end_of_setup:
   690                           
   691                           	psect	text3
   692  001C                     __ptext3:	
   693 ;; *************** function _ISR *****************
   694 ;; Defined at:
   695 ;;		line 101 in file "main.c"
   696 ;; Parameters:    Size  Location     Type
   697 ;;		None
   698 ;; Auto vars:     Size  Location     Type
   699 ;;		None
   700 ;; Return value:  Size  Location     Type
   701 ;;                  1    wreg      void 
   702 ;; Registers used:
   703 ;;		wreg, status,2, status,0, pclath, cstack
   704 ;; Tracked objects:
   705 ;;		On entry : 0/0
   706 ;;		On exit  : 0/0
   707 ;;		Unchanged: 0/0
   708 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   709 ;;      Params:         0       0       0       0       0
   710 ;;      Locals:         0       0       0       0       0
   711 ;;      Temps:          3       0       0       0       0
   712 ;;      Totals:         3       0       0       0       0
   713 ;;Total ram usage:        3 bytes
   714 ;; Hardware stack levels used:    1
   715 ;; Hardware stack levels required when called:    2
   716 ;; This function calls:
   717 ;;		_spiRead
   718 ;;		_spiWrite
   719 ;; This function is called by:
   720 ;;		Interrupt level 1
   721 ;; This function uses a non-reentrant model
   722 ;;
   723                           
   724                           
   725                           ;psect for function _ISR
   726  001C                     _ISR:
   727  001C                     i1l743:
   728                           
   729                           ;main.c: 102:     if (PIR1bits.SSPIF == 1) {
   730  001C  1283               	bcf	3,5	;RP0=0, select bank0
   731  001D  1303               	bcf	3,6	;RP1=0, select bank0
   732  001E  1D8C               	btfss	12,3	;volatile
   733  001F  2821               	goto	u3_21
   734  0020  2822               	goto	u3_20
   735  0021                     u3_21:
   736  0021  2833               	goto	i1l749
   737  0022                     u3_20:
   738  0022                     i1l745:
   739                           
   740                           ;main.c: 104:         a = spiRead();
   741  0022  120A  118A  20B6  120A  118A  	fcall	_spiRead
   742  0027  00F1               	movwf	??_ISR
   743  0028  0871               	movf	??_ISR,w
   744  0029  00F5               	movwf	_a
   745                           
   746                           ;main.c: 105:         spiWrite(count);
   747  002A  0877               	movf	_count,w
   748  002B  120A  118A  20C6  120A  118A  	fcall	_spiWrite
   749  0030                     i1l747:
   750                           
   751                           ;main.c: 106:         PIR1bits.SSPIF = 0;
   752  0030  1283               	bcf	3,5	;RP0=0, select bank0
   753  0031  1303               	bcf	3,6	;RP1=0, select bank0
   754  0032  118C               	bcf	12,3	;volatile
   755  0033                     i1l749:
   756                           
   757                           ;main.c: 110:     if (INTCONbits.RBIF == 1) {
   758  0033  1C0B               	btfss	11,0	;volatile
   759  0034  2836               	goto	u4_21
   760  0035  2837               	goto	u4_20
   761  0036                     u4_21:
   762  0036  2860               	goto	i1l773
   763  0037                     u4_20:
   764  0037                     i1l751:
   765                           
   766                           ;main.c: 111:         if (PORTBbits.RB6 == 0) {
   767  0037  1B06               	btfsc	6,6	;volatile
   768  0038  283A               	goto	u5_21
   769  0039  283B               	goto	u5_20
   770  003A                     u5_21:
   771  003A  284D               	goto	i1l62
   772  003B                     u5_20:
   773  003B  2842               	goto	i1l757
   774  003C                     i1l64:
   775                           
   776                           ;main.c: 113:                 if (PORTBbits.RB6 == 1) {
   777  003C  1F06               	btfss	6,6	;volatile
   778  003D  283F               	goto	u6_21
   779  003E  2840               	goto	u6_20
   780  003F                     u6_21:
   781  003F  2842               	goto	i1l757
   782  0040                     u6_20:
   783  0040                     i1l755:
   784                           
   785                           ;main.c: 114:                     flag2 = 1;
   786  0040  01F6               	clrf	_flag2
   787  0041  0AF6               	incf	_flag2,f
   788  0042                     i1l757:
   789                           
   790                           ;main.c: 112:             while (flag2 == 0) {
   791  0042  0876               	movf	_flag2,w
   792  0043  1903               	btfsc	3,2
   793  0044  2846               	goto	u7_21
   794  0045  2847               	goto	u7_20
   795  0046                     u7_21:
   796  0046  283C               	goto	i1l64
   797  0047                     u7_20:
   798  0047                     i1l759:
   799                           
   800                           ;main.c: 117:             flag2 = 0;
   801  0047  01F6               	clrf	_flag2
   802  0048                     i1l761:
   803                           
   804                           ;main.c: 118:             count++;
   805  0048  3001               	movlw	1
   806  0049  00F1               	movwf	??_ISR
   807  004A  0871               	movf	??_ISR,w
   808  004B  07F7               	addwf	_count,f
   809                           
   810                           ;main.c: 120:         } else if (PORTBbits.RB7 == 0) {
   811  004C  2860               	goto	i1l773
   812  004D                     i1l62:
   813  004D  1B86               	btfsc	6,7	;volatile
   814  004E  2850               	goto	u8_21
   815  004F  2851               	goto	u8_20
   816  0050                     u8_21:
   817  0050  2860               	goto	i1l773
   818  0051                     u8_20:
   819  0051  2858               	goto	i1l767
   820  0052                     i1l70:
   821                           
   822                           ;main.c: 122:                 if (PORTBbits.RB7 == 1) {
   823  0052  1F86               	btfss	6,7	;volatile
   824  0053  2855               	goto	u9_21
   825  0054  2856               	goto	u9_20
   826  0055                     u9_21:
   827  0055  2858               	goto	i1l767
   828  0056                     u9_20:
   829  0056                     i1l765:
   830                           
   831                           ;main.c: 123:                     flag2 = 1;
   832  0056  01F6               	clrf	_flag2
   833  0057  0AF6               	incf	_flag2,f
   834  0058                     i1l767:
   835                           
   836                           ;main.c: 121:             while (flag2 == 0) {
   837  0058  0876               	movf	_flag2,w
   838  0059  1903               	btfsc	3,2
   839  005A  285C               	goto	u10_21
   840  005B  285D               	goto	u10_20
   841  005C                     u10_21:
   842  005C  2852               	goto	i1l70
   843  005D                     u10_20:
   844  005D                     i1l769:
   845                           
   846                           ;main.c: 126:             flag2 = 0;
   847  005D  01F6               	clrf	_flag2
   848  005E                     i1l771:
   849                           
   850                           ;main.c: 127:             count--;
   851  005E  3001               	movlw	1
   852  005F  02F7               	subwf	_count,f
   853  0060                     i1l773:
   854                           
   855                           ;main.c: 131:     INTCONbits.RBIF = 0;
   856  0060  100B               	bcf	11,0	;volatile
   857  0061                     i1l73:
   858  0061  0873               	movf	??_ISR+2,w
   859  0062  008A               	movwf	10
   860  0063  0E72               	swapf	??_ISR+1,w
   861  0064  0083               	movwf	3
   862  0065  0EFE               	swapf	btemp,f
   863  0066  0E7E               	swapf	btemp,w
   864  0067  0009               	retfie
   865  0068                     __end_of_ISR:
   866                           
   867                           	psect	intentry
   868  0004                     __pintentry:	
   869                           ;incstack = 0
   870                           ; Regs used in _ISR: [wreg+status,2+status,0+pclath+cstack]
   871                           
   872  0004                     interrupt_function:
   873  007E                     saved_w	set	btemp
   874  0004  00FE               	movwf	btemp
   875  0005  0E03               	swapf	3,w
   876  0006  00F2               	movwf	??_ISR+1
   877  0007  080A               	movf	10,w
   878  0008  00F3               	movwf	??_ISR+2
   879  0009  120A  118A  281C   	ljmp	_ISR
   880                           
   881                           	psect	text4
   882  00C6                     __ptext4:	
   883 ;; *************** function _spiWrite *****************
   884 ;; Defined at:
   885 ;;		line 35 in file "SPI.c"
   886 ;; Parameters:    Size  Location     Type
   887 ;;  dat             1    wreg     unsigned char 
   888 ;; Auto vars:     Size  Location     Type
   889 ;;  dat             1    0[COMMON] unsigned char 
   890 ;; Return value:  Size  Location     Type
   891 ;;                  1    wreg      void 
   892 ;; Registers used:
   893 ;;		wreg
   894 ;; Tracked objects:
   895 ;;		On entry : 0/0
   896 ;;		On exit  : 0/0
   897 ;;		Unchanged: 0/0
   898 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   899 ;;      Params:         0       0       0       0       0
   900 ;;      Locals:         1       0       0       0       0
   901 ;;      Temps:          0       0       0       0       0
   902 ;;      Totals:         1       0       0       0       0
   903 ;;Total ram usage:        1 bytes
   904 ;; Hardware stack levels used:    1
   905 ;; This function calls:
   906 ;;		Nothing
   907 ;; This function is called by:
   908 ;;		_ISR
   909 ;; This function uses a non-reentrant model
   910 ;;
   911                           
   912                           
   913                           ;psect for function _spiWrite
   914  00C6                     _spiWrite:
   915                           
   916                           ;incstack = 0
   917                           ; Regs used in _spiWrite: [wreg]
   918                           ;spiWrite@dat stored from wreg
   919  00C6  00F0               	movwf	spiWrite@dat
   920  00C7                     i1l731:
   921                           
   922                           ;SPI.c: 35: void spiWrite(char dat);SPI.c: 36: {;SPI.c: 37:     SSPBUF = dat;
   923  00C7  0870               	movf	spiWrite@dat,w
   924  00C8  1283               	bcf	3,5	;RP0=0, select bank0
   925  00C9  1303               	bcf	3,6	;RP1=0, select bank0
   926  00CA  0093               	movwf	19	;volatile
   927  00CB                     i1l99:
   928  00CB  0008               	return
   929  00CC                     __end_of_spiWrite:
   930                           
   931                           	psect	text5
   932  00B6                     __ptext5:	
   933 ;; *************** function _spiRead *****************
   934 ;; Defined at:
   935 ;;		line 48 in file "SPI.c"
   936 ;; Parameters:    Size  Location     Type
   937 ;;		None
   938 ;; Auto vars:     Size  Location     Type
   939 ;;		None
   940 ;; Return value:  Size  Location     Type
   941 ;;                  1    wreg      unsigned char 
   942 ;; Registers used:
   943 ;;		wreg, status,2, status,0, pclath, cstack
   944 ;; Tracked objects:
   945 ;;		On entry : 0/0
   946 ;;		On exit  : 0/0
   947 ;;		Unchanged: 0/0
   948 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   949 ;;      Params:         0       0       0       0       0
   950 ;;      Locals:         0       0       0       0       0
   951 ;;      Temps:          0       0       0       0       0
   952 ;;      Totals:         0       0       0       0       0
   953 ;;Total ram usage:        0 bytes
   954 ;; Hardware stack levels used:    1
   955 ;; Hardware stack levels required when called:    1
   956 ;; This function calls:
   957 ;;		_spiReceiveWait
   958 ;; This function is called by:
   959 ;;		_ISR
   960 ;; This function uses a non-reentrant model
   961 ;;
   962                           
   963                           
   964                           ;psect for function _spiRead
   965  00B6                     _spiRead:
   966  00B6                     i1l725:	
   967                           ;incstack = 0
   968                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
   969                           
   970                           
   971                           ;SPI.c: 50:     spiReceiveWait();
   972  00B6  120A  118A  20BF  120A  118A  	fcall	_spiReceiveWait
   973  00BB                     i1l727:
   974                           
   975                           ;SPI.c: 51:     return(SSPBUF);
   976  00BB  1283               	bcf	3,5	;RP0=0, select bank0
   977  00BC  1303               	bcf	3,6	;RP1=0, select bank0
   978  00BD  0813               	movf	19,w	;volatile
   979  00BE                     i1l107:
   980  00BE  0008               	return
   981  00BF                     __end_of_spiRead:
   982                           
   983                           	psect	text6
   984  00BF                     __ptext6:	
   985 ;; *************** function _spiReceiveWait *****************
   986 ;; Defined at:
   987 ;;		line 30 in file "SPI.c"
   988 ;; Parameters:    Size  Location     Type
   989 ;;		None
   990 ;; Auto vars:     Size  Location     Type
   991 ;;		None
   992 ;; Return value:  Size  Location     Type
   993 ;;                  1    wreg      void 
   994 ;; Registers used:
   995 ;;		None
   996 ;; Tracked objects:
   997 ;;		On entry : 0/0
   998 ;;		On exit  : 0/0
   999 ;;		Unchanged: 0/0
  1000 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1001 ;;      Params:         0       0       0       0       0
  1002 ;;      Locals:         0       0       0       0       0
  1003 ;;      Temps:          0       0       0       0       0
  1004 ;;      Totals:         0       0       0       0       0
  1005 ;;Total ram usage:        0 bytes
  1006 ;; Hardware stack levels used:    1
  1007 ;; This function calls:
  1008 ;;		Nothing
  1009 ;; This function is called by:
  1010 ;;		_spiRead
  1011 ;; This function uses a non-reentrant model
  1012 ;;
  1013                           
  1014                           
  1015                           ;psect for function _spiReceiveWait
  1016  00BF                     _spiReceiveWait:
  1017  00BF                     i1l699:	
  1018                           ;incstack = 0
  1019                           ; Regs used in _spiReceiveWait: []
  1020                           
  1021  00BF                     i1l93:	
  1022                           ;SPI.c: 32:     while ( !SSPSTATbits.BF );
  1023                           
  1024  00BF  1683               	bsf	3,5	;RP0=1, select bank1
  1025  00C0  1303               	bcf	3,6	;RP1=0, select bank1
  1026  00C1  1C14               	btfss	20,0	;volatile
  1027  00C2  28C4               	goto	u1_21
  1028  00C3  28C5               	goto	u1_20
  1029  00C4                     u1_21:
  1030  00C4  28BF               	goto	i1l93
  1031  00C5                     u1_20:
  1032  00C5                     i1l96:
  1033  00C5  0008               	return
  1034  00C6                     __end_of_spiReceiveWait:
  1035  007E                     btemp	set	126	;btemp
  1036  007E                     wtemp0	set	126
  1037                           
  1038                           	psect	config
  1039                           
  1040                           ;Config register CONFIG1 @ 0x2007
  1041                           ;	Oscillator Selection bits
  1042                           ;	FOSC = INTRC_CLKOUT, INTOSC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, I/O fu
      +                          nction on RA7/OSC1/CLKIN
  1043                           ;	Watchdog Timer Enable bit
  1044                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  1045                           ;	Power-up Timer Enable bit
  1046                           ;	PWRTE = OFF, PWRT disabled
  1047                           ;	RE3/MCLR pin function select bit
  1048                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  1049                           ;	Code Protection bit
  1050                           ;	CP = OFF, Program memory code protection is disabled
  1051                           ;	Data Code Protection bit
  1052                           ;	CPD = OFF, Data memory code protection is disabled
  1053                           ;	Brown Out Reset Selection bits
  1054                           ;	BOREN = OFF, BOR disabled
  1055                           ;	Internal External Switchover bit
  1056                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  1057                           ;	Fail-Safe Clock Monitor Enabled bit
  1058                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  1059                           ;	Low Voltage Programming Enable bit
  1060                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  1061                           ;	In-Circuit Debugger Mode bit
  1062                           ;	DEBUG = 0x1, unprogrammed default
  1063  2007                     	org	8199
  1064  2007  20D5               	dw	8405
  1065                           
  1066                           ;Config register CONFIG2 @ 0x2008
  1067                           ;	Brown-out Reset Selection bit
  1068                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  1069                           ;	Flash Program Memory Self Write Enable bits
  1070                           ;	WRT = OFF, Write protection off
  1071  2008                     	org	8200
  1072  2008  3FFF               	dw	16383

Data Sizes:
    Strings     0
    Constant    0
    Data        1
    BSS         3
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      5       9
    BANK0            80      3       3
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_spiInit

Critical Paths under _ISR in COMMON

    _ISR->_spiWrite

Critical Paths under _main in BANK0

    _main->_spiInit

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0     456
                              _setup
                            _spiInit
 ---------------------------------------------------------------------------------
 (1) _spiInit                                              4     1      3     456
                                              4 COMMON     1     1      0
                                              0 BANK0      3     0      3
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  3     3      0      15
                                              1 COMMON     3     3      0
                            _spiRead
                           _spiWrite
 ---------------------------------------------------------------------------------
 (3) _spiWrite                                             1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (3) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (4) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _setup
   _spiInit

 _ISR (ROOT)
   _spiRead
     _spiReceiveWait
   _spiWrite

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50      3       3       5        3.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      5       9       1       64.3%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0       C      12        0.0%
ABS                  0      0       C       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Thu Feb 18 21:36:55 2021

                      _a 0075              _SSPSTATbits 0094                       l55 00B5  
                     l90 0085                       l89 0080                      l701 00A1  
                    l711 00AB                      l703 00A4                      l713 00B3  
                    l705 00A5                      l801 0069                      l707 00A7  
                    l803 0070                      l811 0086                      l709 00AA  
                    l805 0076                      l813 008B                      l807 0078  
                    l815 008C                      l809 007F                      l817 008E  
                    l819 0099                      u120 0070                      u121 006F  
                    _ISR 001C                     ?_ISR 0070                     i1l70 0052  
                   i1l62 004D                     i1l64 003C                     i1l73 0061  
                   i1l93 00BF                     i1l96 00C5                     i1l99 00CB  
                   u1_20 00C5                     u1_21 00C4                     u3_20 0022  
                   u3_21 0021                     u4_20 0037                     u4_21 0036  
                   u5_20 003B                     u5_21 003A                     u6_20 0040  
                   u6_21 003F                     u7_20 0047                     u7_21 0046  
                   u8_20 0051                     u8_21 0050                     u9_20 0056  
                   u9_21 0055                     _flag 0078                     _main 0086  
                   btemp 007E                     start 000C                    ??_ISR 0071  
                  ?_main 0070                    i1l107 00BE                    i1l731 00C7  
                  i1l725 00B6                    i1l727 00BB                    i1l751 0037  
                  i1l743 001C                    i1l761 0048                    i1l745 0022  
                  i1l771 005E                    i1l755 0040                    i1l747 0030  
                  i1l765 0056                    i1l757 0042                    i1l773 0060  
                  i1l749 0033                    i1l767 0058                    i1l759 0047  
                  i1l769 005D                    i1l699 00BF                    u10_20 005D  
                  u10_21 005C                    _PORTB 0006                    _PORTC 0007  
                  _PORTD 0008                    _PORTE 0009                    _TRISB 0086  
                  _TRISC 0087                    _TRISD 0088                    _TRISE 0089  
                  _flag2 0076                    _count 0077                    _setup 00A1  
                  pclath 000A          __end_of_spiInit 0086          __end_of_spiRead 00BF  
                  status 0003                    wtemp0 007E          __initialization 000F  
           __end_of_main 00A1                   ??_main 0075                   ?_setup 0070  
                 _INTCON 000B                   _TRISC3 043B                   _TRISC5 043D  
                 _SSPCON 0014                   _SSPBUF 0013             __pdataCOMMON 0078  
                 saved_w 007E         __end_of_spiWrite 00CC                ??_spiInit 0074  
              ??_spiRead 0070  __end_of__initialization 0018           __pcstackCOMMON 0070  
          __end_of_setup 00B6                  ??_setup 0074               __pmaintext 0086  
             __pintentry 0004  __size_of_spiReceiveWait 0007                  _SSPSTAT 0094  
              ?_spiWrite 0070                  __ptext1 0068                  __ptext2 00A1  
                __ptext3 001C                  __ptext4 00C6                  __ptext5 00B6  
                __ptext6 00BF             __size_of_ISR 004C                  _spiInit 0068  
                _spiRead 00B6     end_of_initialization 0018               ??_spiWrite 0070  
              _PORTBbits 0006                _TRISAbits 0085              spiWrite@dat 0070  
         _spiReceiveWait 00BF            __pidataCOMMON 00CC      start_initialization 000F  
            __end_of_ISR 0068   __end_of_spiReceiveWait 00C6              __pbssCOMMON 0075  
              ___latbits 0002            __pcstackBANK0 0020          ?_spiReceiveWait 0070  
      __size_of_spiWrite 0006                 ?_spiInit 0020                 ?_spiRead 0070  
         __size_of_setup 0015     spiInit@sTransmitEdge 0022        interrupt_function 0004  
               _IOCBbits 0096       spiInit@sDataSample 0020                 _PIR1bits 000C  
       __size_of_spiInit 001E         __size_of_spiRead 0009            __size_of_main 001B  
               _spiWrite 00C6             spiInit@sType 0074        spiInit@sClockIdle 0021  
             _INTCONbits 000B                 intlevel1 0000         ??_spiReceiveWait 0070  
