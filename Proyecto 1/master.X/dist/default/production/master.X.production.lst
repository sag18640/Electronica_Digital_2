

Microchip MPLAB XC8 Assembler V2.31 build 20201012212115 
                                                                                               Fri Feb 19 23:34:05 2021

Microchip MPLAB XC8 C Compiler v2.31 (Free license) build 20201012212115 Og1 
     1                           	processor	16F887
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	idataCOMMON,global,class=CODE,delta=2,noexec
     5                           	psect	strings,global,class=STRING,delta=2,noexec
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1,noexec
     8                           	psect	dataCOMMON,global,class=COMMON,space=1,delta=1,noexec
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
    10                           	psect	clrtext,global,class=CODE,delta=2
    11                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    12                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    13                           	psect	maintext,global,class=CODE,split=1,delta=2
    14                           	psect	text1,local,class=CODE,merge=1,delta=2,group=1
    15                           	psect	text2,local,class=CODE,merge=1,delta=2,group=2
    16                           	psect	text3,local,class=CODE,merge=1,delta=2,group=2
    17                           	psect	text4,local,class=CODE,merge=1,delta=2
    18                           	psect	text5,local,class=CODE,merge=1,delta=2
    19                           	psect	text6,local,class=CODE,merge=1,delta=2
    20                           	psect	text7,local,class=CODE,merge=1,delta=2
    21                           	psect	text8,local,class=CODE,merge=1,delta=2
    22                           	psect	text9,local,class=CODE,merge=1,delta=2
    23                           	psect	text10,local,class=CODE,merge=1,delta=2
    24                           	psect	text11,local,class=CODE,merge=1,delta=2
    25                           	psect	text12,local,class=CODE,merge=1,delta=2
    26                           	psect	text13,local,class=CODE,merge=1,delta=2
    27                           	psect	text14,local,class=CODE,merge=1,delta=2
    28                           	psect	text15,local,class=CODE,merge=1,delta=2
    29                           	psect	text16,local,class=CODE,merge=1,delta=2
    30                           	psect	text17,local,class=CODE,merge=1,delta=2
    31                           	psect	text18,local,class=CODE,merge=1,delta=2
    32                           	psect	intentry,global,class=CODE,delta=2
    33                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    34                           	dabs	1,0x7E,2
    35  0000                     
    36                           ; Version 2.20
    37                           ; Generated 12/02/2020 GMT
    38                           ; 
    39                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    40                           ; All rights reserved.
    41                           ; 
    42                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    43                           ; 
    44                           ; Redistribution and use in source and binary forms, with or without modification, are
    45                           ; permitted provided that the following conditions are met:
    46                           ; 
    47                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    48                           ;        conditions and the following disclaimer.
    49                           ; 
    50                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    51                           ;        of conditions and the following disclaimer in the documentation and/or other
    52                           ;        materials provided with the distribution.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC16F887 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70  0000                     	;# 
    71  0001                     	;# 
    72  0002                     	;# 
    73  0003                     	;# 
    74  0004                     	;# 
    75  0005                     	;# 
    76  0006                     	;# 
    77  0007                     	;# 
    78  0008                     	;# 
    79  0009                     	;# 
    80  000A                     	;# 
    81  000B                     	;# 
    82  000C                     	;# 
    83  000D                     	;# 
    84  000E                     	;# 
    85  000E                     	;# 
    86  000F                     	;# 
    87  0010                     	;# 
    88  0011                     	;# 
    89  0012                     	;# 
    90  0013                     	;# 
    91  0014                     	;# 
    92  0015                     	;# 
    93  0015                     	;# 
    94  0016                     	;# 
    95  0017                     	;# 
    96  0018                     	;# 
    97  0019                     	;# 
    98  001A                     	;# 
    99  001B                     	;# 
   100  001B                     	;# 
   101  001C                     	;# 
   102  001D                     	;# 
   103  001E                     	;# 
   104  001F                     	;# 
   105  0081                     	;# 
   106  0085                     	;# 
   107  0086                     	;# 
   108  0087                     	;# 
   109  0088                     	;# 
   110  0089                     	;# 
   111  008C                     	;# 
   112  008D                     	;# 
   113  008E                     	;# 
   114  008F                     	;# 
   115  0090                     	;# 
   116  0091                     	;# 
   117  0092                     	;# 
   118  0093                     	;# 
   119  0093                     	;# 
   120  0093                     	;# 
   121  0094                     	;# 
   122  0095                     	;# 
   123  0096                     	;# 
   124  0097                     	;# 
   125  0098                     	;# 
   126  0099                     	;# 
   127  009A                     	;# 
   128  009B                     	;# 
   129  009C                     	;# 
   130  009D                     	;# 
   131  009E                     	;# 
   132  009F                     	;# 
   133  0105                     	;# 
   134  0107                     	;# 
   135  0108                     	;# 
   136  0109                     	;# 
   137  010C                     	;# 
   138  010C                     	;# 
   139  010D                     	;# 
   140  010E                     	;# 
   141  010F                     	;# 
   142  0185                     	;# 
   143  0187                     	;# 
   144  0188                     	;# 
   145  0189                     	;# 
   146  018C                     	;# 
   147  018D                     	;# 
   148  0000                     	;# 
   149  0001                     	;# 
   150  0002                     	;# 
   151  0003                     	;# 
   152  0004                     	;# 
   153  0005                     	;# 
   154  0006                     	;# 
   155  0007                     	;# 
   156  0008                     	;# 
   157  0009                     	;# 
   158  000A                     	;# 
   159  000B                     	;# 
   160  000C                     	;# 
   161  000D                     	;# 
   162  000E                     	;# 
   163  000E                     	;# 
   164  000F                     	;# 
   165  0010                     	;# 
   166  0011                     	;# 
   167  0012                     	;# 
   168  0013                     	;# 
   169  0014                     	;# 
   170  0015                     	;# 
   171  0015                     	;# 
   172  0016                     	;# 
   173  0017                     	;# 
   174  0018                     	;# 
   175  0019                     	;# 
   176  001A                     	;# 
   177  001B                     	;# 
   178  001B                     	;# 
   179  001C                     	;# 
   180  001D                     	;# 
   181  001E                     	;# 
   182  001F                     	;# 
   183  0081                     	;# 
   184  0085                     	;# 
   185  0086                     	;# 
   186  0087                     	;# 
   187  0088                     	;# 
   188  0089                     	;# 
   189  008C                     	;# 
   190  008D                     	;# 
   191  008E                     	;# 
   192  008F                     	;# 
   193  0090                     	;# 
   194  0091                     	;# 
   195  0092                     	;# 
   196  0093                     	;# 
   197  0093                     	;# 
   198  0093                     	;# 
   199  0094                     	;# 
   200  0095                     	;# 
   201  0096                     	;# 
   202  0097                     	;# 
   203  0098                     	;# 
   204  0099                     	;# 
   205  009A                     	;# 
   206  009B                     	;# 
   207  009C                     	;# 
   208  009D                     	;# 
   209  009E                     	;# 
   210  009F                     	;# 
   211  0105                     	;# 
   212  0107                     	;# 
   213  0108                     	;# 
   214  0109                     	;# 
   215  010C                     	;# 
   216  010C                     	;# 
   217  010D                     	;# 
   218  010E                     	;# 
   219  010F                     	;# 
   220  0185                     	;# 
   221  0187                     	;# 
   222  0188                     	;# 
   223  0189                     	;# 
   224  018C                     	;# 
   225  018D                     	;# 
   226  0000                     	;# 
   227  0001                     	;# 
   228  0002                     	;# 
   229  0003                     	;# 
   230  0004                     	;# 
   231  0005                     	;# 
   232  0006                     	;# 
   233  0007                     	;# 
   234  0008                     	;# 
   235  0009                     	;# 
   236  000A                     	;# 
   237  000B                     	;# 
   238  000C                     	;# 
   239  000D                     	;# 
   240  000E                     	;# 
   241  000E                     	;# 
   242  000F                     	;# 
   243  0010                     	;# 
   244  0011                     	;# 
   245  0012                     	;# 
   246  0013                     	;# 
   247  0014                     	;# 
   248  0015                     	;# 
   249  0015                     	;# 
   250  0016                     	;# 
   251  0017                     	;# 
   252  0018                     	;# 
   253  0019                     	;# 
   254  001A                     	;# 
   255  001B                     	;# 
   256  001B                     	;# 
   257  001C                     	;# 
   258  001D                     	;# 
   259  001E                     	;# 
   260  001F                     	;# 
   261  0081                     	;# 
   262  0085                     	;# 
   263  0086                     	;# 
   264  0087                     	;# 
   265  0088                     	;# 
   266  0089                     	;# 
   267  008C                     	;# 
   268  008D                     	;# 
   269  008E                     	;# 
   270  008F                     	;# 
   271  0090                     	;# 
   272  0091                     	;# 
   273  0092                     	;# 
   274  0093                     	;# 
   275  0093                     	;# 
   276  0093                     	;# 
   277  0094                     	;# 
   278  0095                     	;# 
   279  0096                     	;# 
   280  0097                     	;# 
   281  0098                     	;# 
   282  0099                     	;# 
   283  009A                     	;# 
   284  009B                     	;# 
   285  009C                     	;# 
   286  009D                     	;# 
   287  009E                     	;# 
   288  009F                     	;# 
   289  0105                     	;# 
   290  0107                     	;# 
   291  0108                     	;# 
   292  0109                     	;# 
   293  010C                     	;# 
   294  010C                     	;# 
   295  010D                     	;# 
   296  010E                     	;# 
   297  010F                     	;# 
   298  0185                     	;# 
   299  0187                     	;# 
   300  0188                     	;# 
   301  0189                     	;# 
   302  018C                     	;# 
   303  018D                     	;# 
   304  0000                     	;# 
   305  0001                     	;# 
   306  0002                     	;# 
   307  0003                     	;# 
   308  0004                     	;# 
   309  0005                     	;# 
   310  0006                     	;# 
   311  0007                     	;# 
   312  0008                     	;# 
   313  0009                     	;# 
   314  000A                     	;# 
   315  000B                     	;# 
   316  000C                     	;# 
   317  000D                     	;# 
   318  000E                     	;# 
   319  000E                     	;# 
   320  000F                     	;# 
   321  0010                     	;# 
   322  0011                     	;# 
   323  0012                     	;# 
   324  0013                     	;# 
   325  0014                     	;# 
   326  0015                     	;# 
   327  0015                     	;# 
   328  0016                     	;# 
   329  0017                     	;# 
   330  0018                     	;# 
   331  0019                     	;# 
   332  001A                     	;# 
   333  001B                     	;# 
   334  001B                     	;# 
   335  001C                     	;# 
   336  001D                     	;# 
   337  001E                     	;# 
   338  001F                     	;# 
   339  0081                     	;# 
   340  0085                     	;# 
   341  0086                     	;# 
   342  0087                     	;# 
   343  0088                     	;# 
   344  0089                     	;# 
   345  008C                     	;# 
   346  008D                     	;# 
   347  008E                     	;# 
   348  008F                     	;# 
   349  0090                     	;# 
   350  0091                     	;# 
   351  0092                     	;# 
   352  0093                     	;# 
   353  0093                     	;# 
   354  0093                     	;# 
   355  0094                     	;# 
   356  0095                     	;# 
   357  0096                     	;# 
   358  0097                     	;# 
   359  0098                     	;# 
   360  0099                     	;# 
   361  009A                     	;# 
   362  009B                     	;# 
   363  009C                     	;# 
   364  009D                     	;# 
   365  009E                     	;# 
   366  009F                     	;# 
   367  0105                     	;# 
   368  0107                     	;# 
   369  0108                     	;# 
   370  0109                     	;# 
   371  010C                     	;# 
   372  010C                     	;# 
   373  010D                     	;# 
   374  010E                     	;# 
   375  010F                     	;# 
   376  0185                     	;# 
   377  0187                     	;# 
   378  0188                     	;# 
   379  0189                     	;# 
   380  018C                     	;# 
   381  018D                     	;# 
   382  0000                     	;# 
   383  0001                     	;# 
   384  0002                     	;# 
   385  0003                     	;# 
   386  0004                     	;# 
   387  0005                     	;# 
   388  0006                     	;# 
   389  0007                     	;# 
   390  0008                     	;# 
   391  0009                     	;# 
   392  000A                     	;# 
   393  000B                     	;# 
   394  000C                     	;# 
   395  000D                     	;# 
   396  000E                     	;# 
   397  000E                     	;# 
   398  000F                     	;# 
   399  0010                     	;# 
   400  0011                     	;# 
   401  0012                     	;# 
   402  0013                     	;# 
   403  0014                     	;# 
   404  0015                     	;# 
   405  0015                     	;# 
   406  0016                     	;# 
   407  0017                     	;# 
   408  0018                     	;# 
   409  0019                     	;# 
   410  001A                     	;# 
   411  001B                     	;# 
   412  001B                     	;# 
   413  001C                     	;# 
   414  001D                     	;# 
   415  001E                     	;# 
   416  001F                     	;# 
   417  0081                     	;# 
   418  0085                     	;# 
   419  0086                     	;# 
   420  0087                     	;# 
   421  0088                     	;# 
   422  0089                     	;# 
   423  008C                     	;# 
   424  008D                     	;# 
   425  008E                     	;# 
   426  008F                     	;# 
   427  0090                     	;# 
   428  0091                     	;# 
   429  0092                     	;# 
   430  0093                     	;# 
   431  0093                     	;# 
   432  0093                     	;# 
   433  0094                     	;# 
   434  0095                     	;# 
   435  0096                     	;# 
   436  0097                     	;# 
   437  0098                     	;# 
   438  0099                     	;# 
   439  009A                     	;# 
   440  009B                     	;# 
   441  009C                     	;# 
   442  009D                     	;# 
   443  009E                     	;# 
   444  009F                     	;# 
   445  0105                     	;# 
   446  0107                     	;# 
   447  0108                     	;# 
   448  0109                     	;# 
   449  010C                     	;# 
   450  010C                     	;# 
   451  010D                     	;# 
   452  010E                     	;# 
   453  010F                     	;# 
   454  0185                     	;# 
   455  0187                     	;# 
   456  0188                     	;# 
   457  0189                     	;# 
   458  018C                     	;# 
   459  018D                     	;# 
   460                           
   461                           	psect	idataCOMMON
   462  0422                     __pidataCOMMON:
   463                           
   464                           ;initializer for _turno
   465  0422  3401               	retlw	1
   466                           
   467                           ;initializer for _flag
   468  0423  3401               	retlw	1
   469                           
   470                           	psect	strings
   471  0300                     __pstrings:
   472  0300                     stringtab:
   473  0300                     __stringtab:
   474                           
   475                           ;	String table - string pointers are 1 byte each
   476  0300  1BFF               	btfsc	btemp+1,7
   477  0301  2B0A               	ljmp	stringcode
   478  0302  1383               	bcf	3,7
   479  0303  187F               	btfsc	btemp+1,0
   480  0304  1783               	bsf	3,7
   481  0305  0800               	movf	0,w
   482  0306  0A84               	incf	4,f
   483  0307  1903               	skipnz
   484  0308  0AFF               	incf	btemp+1,f
   485  0309  0008               	return
   486  030A                     stringcode:
   487  030A                     stringdir:
   488  030A  3003               	movlw	high stringdir
   489  030B  008A               	movwf	10
   490  030C  0804               	movf	4,w
   491  030D  0A84               	incf	4,f
   492  030E  0782               	addwf	2,f
   493  030F                     __stringbase:
   494  030F  3400               	retlw	0
   495  0310                     __end_of__stringtab:
   496  0310                     _dpowers:
   497  0310  3401               	retlw	1
   498  0311  3400               	retlw	0
   499  0312  340A               	retlw	10
   500  0313  3400               	retlw	0
   501  0314  3464               	retlw	100
   502  0315  3400               	retlw	0
   503  0316  34E8               	retlw	232
   504  0317  3403               	retlw	3
   505  0318  3410               	retlw	16
   506  0319  3427               	retlw	39
   507  031A                     __end_of_dpowers:
   508  0013                     _SSPBUF	set	19
   509  0014                     _SSPCON	set	20
   510  0019                     _TXREG	set	25
   511  000B                     _INTCONbits	set	11
   512  0009                     _PORTEbits	set	9
   513  001A                     _RCREG	set	26
   514  0018                     _RCSTAbits	set	24
   515  000C                     _PIR1bits	set	12
   516  0006                     _PORTB	set	6
   517  0009                     _PORTE	set	9
   518  0008                     _PORTD	set	8
   519  0007                     _PORTCbits	set	7
   520  0094                     _SSPSTATbits	set	148
   521  0094                     _SSPSTAT	set	148
   522  008C                     _PIE1bits	set	140
   523  0099                     _SPBRG	set	153
   524  0098                     _TXSTAbits	set	152
   525  0086                     _TRISB	set	134
   526  0089                     _TRISE	set	137
   527  0087                     _TRISC	set	135
   528  0088                     _TRISD	set	136
   529  043B                     _TRISC3	set	1083
   530  043D                     _TRISC5	set	1085
   531  04C1                     _TRMT	set	1217
   532  0187                     _BAUDCTLbits	set	391
   533  0188                     _ANSEL	set	392
   534  031A                     STR_1:
   535  031A  3453               	retlw	83	;'S'
   536  031B  3431               	retlw	49	;'1'
   537  031C  343A               	retlw	58	;':'
   538  031D  3420               	retlw	32	;' '
   539  031E  3420               	retlw	32	;' '
   540  031F  3420               	retlw	32	;' '
   541  0320  3453               	retlw	83	;'S'
   542  0321  3432               	retlw	50	;'2'
   543  0322  343A               	retlw	58	;':'
   544  0323  3420               	retlw	32	;' '
   545  0324  3420               	retlw	32	;' '
   546  0325  3420               	retlw	32	;' '
   547  0326  3420               	retlw	32	;' '
   548  0327  3453               	retlw	83	;'S'
   549  0328  3433               	retlw	51	;'3'
   550  0329  343A               	retlw	58	;':'
   551  032A  3400               	retlw	0
   552  032B                     STR_2:
   553  032B  3420               	retlw	32	;' '
   554  032C  3420               	retlw	32	;' '
   555  032D  3420               	retlw	32	;' '
   556  032E  3400               	retlw	0
   557  032F                     STR_3:
   558  032F  3425               	retlw	37	;'%'
   559  0330  3464               	retlw	100	;'d'
   560  0331  3400               	retlw	0
   561                           
   562                           	psect	cinit
   563  000F                     start_initialization:	
   564                           ; #config settings
   565                           
   566  000F                     __initialization:
   567                           
   568                           ; Initialize objects allocated to COMMON
   569  000F  120A  118A  2422  120A  118A  	fcall	__pidataCOMMON	;fetch initializer
   570  0014  00F8               	movwf	__pdataCOMMON& (0+127)
   571  0015  120A  118A  2423  120A  118A  	fcall	__pidataCOMMON+1	;fetch initializer
   572  001A  00F9               	movwf	(__pdataCOMMON+1)& (0+127)
   573                           
   574                           ; Clear objects allocated to BANK0
   575  001B  1383               	bcf	3,7	;select IRP bank0
   576  001C  3020               	movlw	low __pbssBANK0
   577  001D  0084               	movwf	4
   578  001E  304A               	movlw	low (__pbssBANK0+42)
   579  001F  120A  118A  2407  120A  118A  	fcall	clear_ram0
   580                           
   581                           ; Clear objects allocated to COMMON
   582  0024  01FA               	clrf	__pbssCOMMON& (0+127)
   583  0025                     end_of_initialization:	
   584                           ;End of C runtime variable initialization code
   585                           
   586  0025                     __end_of__initialization:
   587  0025  0183               	clrf	3
   588  0026  120A  118A  2913   	ljmp	_main	;jump to C main() function
   589                           
   590                           	psect	bssCOMMON
   591  007A                     __pbssCOMMON:
   592  007A                     _retorno:
   593  007A                     	ds	1
   594                           
   595                           	psect	dataCOMMON
   596  0078                     __pdataCOMMON:
   597  0078                     _turno:
   598  0078                     	ds	1
   599  0079                     _flag:
   600  0079                     	ds	1
   601                           
   602                           	psect	bssBANK0
   603  0020                     __pbssBANK0:
   604  0020                     _p:
   605  0020                     	ds	4
   606  0024                     _x:
   607  0024                     	ds	4
   608  0028                     _vv:
   609  0028                     	ds	4
   610  002C                     _v:
   611  002C                     	ds	4
   612  0030                     _enviado:
   613  0030                     	ds	1
   614  0031                     _recibido:
   615  0031                     	ds	1
   616  0032                     _count:
   617  0032                     	ds	1
   618  0033                     _valorA:
   619  0033                     	ds	1
   620  0034                     _valorC:
   621  0034                     	ds	1
   622  0035                     _valorT:
   623  0035                     	ds	1
   624  0036                     _s:
   625  0036                     	ds	20
   626                           
   627                           	psect	clrtext
   628  0407                     clear_ram0:	
   629                           ;	Called with FSR containing the base address, and
   630                           ;	W with the last address+1
   631                           
   632  0407  0064               	clrwdt	;clear the watchdog before getting into this loop
   633  0408                     clrloop0:
   634  0408  0180               	clrf	0	;clear RAM location pointed to by FSR
   635  0409  0A84               	incf	4,f	;increment pointer
   636  040A  0604               	xorwf	4,w	;XOR with final address
   637  040B  1903               	btfsc	3,2	;have we reached the end yet?
   638  040C  3400               	retlw	0	;all done for this memory range, return
   639  040D  0604               	xorwf	4,w	;XOR again to restore value
   640  040E  2C08               	goto	clrloop0	;do the next byte
   641                           
   642                           	psect	cstackCOMMON
   643  0070                     __pcstackCOMMON:
   644  0070                     ?_setup:
   645  0070                     ?_Config_USARTT:	
   646                           ; 1 bytes @ 0x0
   647                           
   648  0070                     ?_recibir:	
   649                           ; 1 bytes @ 0x0
   650                           
   651  0070                     ?_Lcd_Init:	
   652                           ; 1 bytes @ 0x0
   653                           
   654  0070                     ?_Lcd_Clear:	
   655                           ; 1 bytes @ 0x0
   656                           
   657  0070                     ?_spiWrite:	
   658                           ; 1 bytes @ 0x0
   659                           
   660  0070                     ?_spiRead:	
   661                           ; 1 bytes @ 0x0
   662                           
   663  0070                     ?_main:	
   664                           ; 1 bytes @ 0x0
   665                           
   666  0070                     ?_ISR:	
   667                           ; 1 bytes @ 0x0
   668                           
   669  0070                     ??_ISR:	
   670                           ; 1 bytes @ 0x0
   671                           
   672  0070                     ?_Lcd_Port:	
   673                           ; 1 bytes @ 0x0
   674                           
   675  0070                     ?_Lcd_Cmd:	
   676                           ; 1 bytes @ 0x0
   677                           
   678  0070                     ?_Lcd_Write_Char:	
   679                           ; 1 bytes @ 0x0
   680                           
   681  0070                     ?_spiReceiveWait:	
   682                           ; 1 bytes @ 0x0
   683                           
   684                           
   685                           ; 1 bytes @ 0x0
   686  0070                     	ds	3
   687  0073                     ??_setup:
   688  0073                     ?_spiInit:	
   689                           ; 1 bytes @ 0x3
   690                           
   691  0073                     ??_Config_USARTT:	
   692                           ; 1 bytes @ 0x3
   693                           
   694  0073                     ??_recibir:	
   695                           ; 1 bytes @ 0x3
   696                           
   697  0073                     ??_spiWrite:	
   698                           ; 1 bytes @ 0x3
   699                           
   700  0073                     ??_spiRead:	
   701                           ; 1 bytes @ 0x3
   702                           
   703  0073                     ??_Lcd_Port:	
   704                           ; 1 bytes @ 0x3
   705                           
   706  0073                     ??_spiReceiveWait:	
   707                           ; 1 bytes @ 0x3
   708                           
   709  0073                     ?___lwdiv:	
   710                           ; 1 bytes @ 0x3
   711                           
   712  0073                     Lcd_Port@a:	
   713                           ; 2 bytes @ 0x3
   714                           
   715  0073                     spiInit@sDataSample:	
   716                           ; 1 bytes @ 0x3
   717                           
   718  0073                     spiWrite@dat:	
   719                           ; 1 bytes @ 0x3
   720                           
   721  0073                     ___lwdiv@divisor:	
   722                           ; 1 bytes @ 0x3
   723                           
   724                           
   725                           ; 2 bytes @ 0x3
   726  0073                     	ds	1
   727  0074                     ??_Lcd_Cmd:
   728  0074                     ??_Lcd_Write_Char:	
   729                           ; 1 bytes @ 0x4
   730                           
   731  0074                     spiInit@sClockIdle:	
   732                           ; 1 bytes @ 0x4
   733                           
   734                           
   735                           ; 1 bytes @ 0x4
   736  0074                     	ds	1
   737  0075                     Lcd_Write_Char@a:
   738  0075                     spiInit@sTransmitEdge:	
   739                           ; 1 bytes @ 0x5
   740                           
   741  0075                     ___lwdiv@dividend:	
   742                           ; 1 bytes @ 0x5
   743                           
   744                           
   745                           ; 2 bytes @ 0x5
   746  0075                     	ds	1
   747  0076                     ??_spiInit:
   748  0076                     ?_Lcd_Write_String:	
   749                           ; 1 bytes @ 0x6
   750                           
   751  0076                     Lcd_Cmd@a:	
   752                           ; 1 bytes @ 0x6
   753                           
   754  0076                     spiInit@sType:	
   755                           ; 1 bytes @ 0x6
   756                           
   757  0076                     Lcd_Write_String@a:	
   758                           ; 1 bytes @ 0x6
   759                           
   760                           
   761                           ; 2 bytes @ 0x6
   762  0076                     	ds	1
   763  0077                     ??_Lcd_Clear:
   764  0077                     ?_Lcd_Set_Cursor:	
   765                           ; 1 bytes @ 0x7
   766                           
   767  0077                     ??___lwdiv:	
   768                           ; 1 bytes @ 0x7
   769                           
   770  0077                     Lcd_Set_Cursor@b:	
   771                           ; 1 bytes @ 0x7
   772                           
   773                           
   774                           ; 1 bytes @ 0x7
   775  0077                     	ds	1
   776                           
   777                           	psect	cstackBANK0
   778  004A                     __pcstackBANK0:
   779  004A                     ??_Lcd_Init:
   780  004A                     ??_Lcd_Set_Cursor:	
   781                           ; 1 bytes @ 0x0
   782                           
   783  004A                     ??_Lcd_Write_String:	
   784                           ; 1 bytes @ 0x0
   785                           
   786  004A                     ___lwdiv@counter:	
   787                           ; 1 bytes @ 0x0
   788                           
   789                           
   790                           ; 1 bytes @ 0x0
   791  004A                     	ds	1
   792  004B                     Lcd_Set_Cursor@a:
   793  004B                     ___lwdiv@quotient:	
   794                           ; 1 bytes @ 0x1
   795                           
   796                           
   797                           ; 2 bytes @ 0x1
   798  004B                     	ds	1
   799  004C                     Lcd_Set_Cursor@temp:
   800                           
   801                           ; 1 bytes @ 0x2
   802  004C                     	ds	1
   803  004D                     ?___lwmod:
   804  004D                     Lcd_Write_String@i:	
   805                           ; 2 bytes @ 0x3
   806                           
   807  004D                     ___lwmod@divisor:	
   808                           ; 2 bytes @ 0x3
   809                           
   810                           
   811                           ; 2 bytes @ 0x3
   812  004D                     	ds	2
   813  004F                     ___lwmod@dividend:
   814                           
   815                           ; 2 bytes @ 0x5
   816  004F                     	ds	2
   817  0051                     ??___lwmod:
   818                           
   819                           ; 1 bytes @ 0x7
   820  0051                     	ds	1
   821  0052                     ___lwmod@counter:
   822                           
   823                           ; 1 bytes @ 0x8
   824  0052                     	ds	1
   825  0053                     ?_sprintf:
   826  0053                     sprintf@f:	
   827                           ; 2 bytes @ 0x9
   828                           
   829                           
   830                           ; 1 bytes @ 0x9
   831  0053                     	ds	3
   832  0056                     ??_sprintf:
   833                           
   834                           ; 1 bytes @ 0xC
   835  0056                     	ds	3
   836  0059                     sprintf@ap:
   837                           
   838                           ; 1 bytes @ 0xF
   839  0059                     	ds	1
   840  005A                     sprintf@flag:
   841                           
   842                           ; 1 bytes @ 0x10
   843  005A                     	ds	1
   844  005B                     sprintf@prec:
   845                           
   846                           ; 1 bytes @ 0x11
   847  005B                     	ds	1
   848  005C                     sprintf@val:
   849                           
   850                           ; 2 bytes @ 0x12
   851  005C                     	ds	2
   852  005E                     sprintf@sp:
   853                           
   854                           ; 1 bytes @ 0x14
   855  005E                     	ds	1
   856  005F                     sprintf@c:
   857                           
   858                           ; 1 bytes @ 0x15
   859  005F                     	ds	1
   860  0060                     ??_main:
   861                           
   862                           ; 1 bytes @ 0x16
   863  0060                     	ds	3
   864                           
   865                           	psect	maintext
   866  0113                     __pmaintext:	
   867 ;;
   868 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   869 ;;
   870 ;; *************** function _main *****************
   871 ;; Defined at:
   872 ;;		line 68 in file "main.c"
   873 ;; Parameters:    Size  Location     Type
   874 ;;		None
   875 ;; Auto vars:     Size  Location     Type
   876 ;;		None
   877 ;; Return value:  Size  Location     Type
   878 ;;                  1    wreg      void 
   879 ;; Registers used:
   880 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   881 ;; Tracked objects:
   882 ;;		On entry : B00/0
   883 ;;		On exit  : 0/0
   884 ;;		Unchanged: 0/0
   885 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   886 ;;      Params:         0       0       0       0       0
   887 ;;      Locals:         0       0       0       0       0
   888 ;;      Temps:          0       3       0       0       0
   889 ;;      Totals:         0       3       0       0       0
   890 ;;Total ram usage:        3 bytes
   891 ;; Hardware stack levels required when called:    4
   892 ;; This function calls:
   893 ;;		_Config_USARTT
   894 ;;		_Lcd_Clear
   895 ;;		_Lcd_Init
   896 ;;		_Lcd_Set_Cursor
   897 ;;		_Lcd_Write_String
   898 ;;		_recibir
   899 ;;		_setup
   900 ;;		_spiInit
   901 ;;		_spiRead
   902 ;;		_spiWrite
   903 ;;		_sprintf
   904 ;; This function is called by:
   905 ;;		Startup code after reset
   906 ;; This function uses a non-reentrant model
   907 ;;
   908                           
   909                           
   910                           ;psect for function _main
   911  0113                     _main:
   912  0113                     l1775:	
   913                           ;incstack = 0
   914                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   915                           
   916                           
   917                           ;main.c: 69:     setup();
   918  0113  120A  118A  23BF  120A  118A  	fcall	_setup
   919                           
   920                           ;main.c: 70:     spiInit(SPI_MASTER_OSC_DIV4, SPI_DATA_SAMPLE_MIDDLE, SPI_CLOCK_IDLE_LOW
      +                          , SPI_IDLE_2_ACTIVE);
   921  0118  01F3               	clrf	spiInit@sDataSample
   922  0119  01F4               	clrf	spiInit@sClockIdle
   923  011A  01F5               	clrf	spiInit@sTransmitEdge
   924  011B  3020               	movlw	32
   925  011C  120A  118A  23A9  120A  118A  	fcall	_spiInit
   926                           
   927                           ;main.c: 71:     Config_USARTT();
   928  0121  120A  118A  23D5  120A  118A  	fcall	_Config_USARTT
   929  0126                     l1777:
   930                           
   931                           ;main.c: 72:     recibir();
   932  0126  120A  118A  23F3  120A  118A  	fcall	_recibir
   933  012B                     l1779:
   934                           
   935                           ;main.c: 73:     Lcd_Init();
   936  012B  120A  118A  21E6  120A  118A  	fcall	_Lcd_Init
   937  0130                     l1781:
   938                           
   939                           ;main.c: 74:     Lcd_Clear();
   940  0130  120A  118A  23E6  120A  118A  	fcall	_Lcd_Clear
   941  0135                     l1783:
   942                           
   943                           ;main.c: 79:         Lcd_Set_Cursor(1, 1);
   944  0135  01F7               	clrf	Lcd_Set_Cursor@b
   945  0136  0AF7               	incf	Lcd_Set_Cursor@b,f
   946  0137  3001               	movlw	1
   947  0138  120A  118A  2332  120A  118A  	fcall	_Lcd_Set_Cursor
   948  013D                     l1785:
   949                           
   950                           ;main.c: 80:         Lcd_Write_String("S1:   S2:    S3:");
   951  013D  300B               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   952  013E  00F6               	movwf	Lcd_Write_String@a
   953  013F  3080               	movlw	128
   954  0140  00F7               	movwf	Lcd_Write_String@a+1
   955  0141  120A  118A  2273  120A  118A  	fcall	_Lcd_Write_String
   956  0146                     l1787:
   957                           
   958                           ;main.c: 114:         if (valorC >= 0 && valorC < 10) {
   959  0146  300A               	movlw	10
   960  0147  1283               	bcf	3,5	;RP0=0, select bank0
   961  0148  1303               	bcf	3,6	;RP1=0, select bank0
   962  0149  0234               	subwf	_valorC,w
   963  014A  1803               	skipnc
   964  014B  294D               	goto	u1391
   965  014C  294E               	goto	u1390
   966  014D                     u1391:
   967  014D  2961               	goto	l1793
   968  014E                     u1390:
   969  014E                     l1789:
   970                           
   971                           ;main.c: 116:             Lcd_Set_Cursor(2, 8);
   972  014E  3008               	movlw	8
   973  014F  00E0               	movwf	??_main
   974  0150  0860               	movf	??_main,w
   975  0151  00F7               	movwf	Lcd_Set_Cursor@b
   976  0152  3002               	movlw	2
   977  0153  120A  118A  2332  120A  118A  	fcall	_Lcd_Set_Cursor
   978  0158                     l1791:
   979                           
   980                           ;main.c: 117:             Lcd_Write_String("   ");
   981  0158  301C               	movlw	(low ((STR_2-__stringbase)| (0+32768)))& (0+255)
   982  0159  00F6               	movwf	Lcd_Write_String@a
   983  015A  3080               	movlw	128
   984  015B  00F7               	movwf	Lcd_Write_String@a+1
   985  015C  120A  118A  2273  120A  118A  	fcall	_Lcd_Write_String
   986  0161                     l1793:
   987                           
   988                           ;main.c: 120:         _delay((unsigned long)((200)*(8000000/4000.0)));
   989  0161  3003               	movlw	3
   990  0162  1283               	bcf	3,5	;RP0=0, select bank0
   991  0163  1303               	bcf	3,6	;RP1=0, select bank0
   992  0164  00E2               	movwf	??_main+2
   993  0165  3008               	movlw	8
   994  0166  00E1               	movwf	??_main+1
   995  0167  3076               	movlw	118
   996  0168  00E0               	movwf	??_main
   997  0169                     u1407:
   998  0169  0BE0               	decfsz	??_main,f
   999  016A  2969               	goto	u1407
  1000  016B  0BE1               	decfsz	??_main+1,f
  1001  016C  2969               	goto	u1407
  1002  016D  0BE2               	decfsz	??_main+2,f
  1003  016E  2969               	goto	u1407
  1004  016F  0000               	nop
  1005  0170                     l1795:
  1006                           
  1007                           ;main.c: 121:         PORTCbits.RC2 = 0;
  1008  0170  1283               	bcf	3,5	;RP0=0, select bank0
  1009  0171  1303               	bcf	3,6	;RP1=0, select bank0
  1010  0172  1107               	bcf	7,2	;volatile
  1011  0173                     l1797:
  1012                           
  1013                           ;main.c: 122:         _delay((unsigned long)((10)*(8000000/4000.0)));
  1014  0173  301A               	movlw	26
  1015  0174  1283               	bcf	3,5	;RP0=0, select bank0
  1016  0175  1303               	bcf	3,6	;RP1=0, select bank0
  1017  0176  00E1               	movwf	??_main+1
  1018  0177  30F7               	movlw	247
  1019  0178  00E0               	movwf	??_main
  1020  0179                     u1417:
  1021  0179  0BE0               	decfsz	??_main,f
  1022  017A  2979               	goto	u1417
  1023  017B  0BE1               	decfsz	??_main+1,f
  1024  017C  2979               	goto	u1417
  1025  017D  297E               	nop2
  1026  017E                     l1799:
  1027                           
  1028                           ;main.c: 123:         spiWrite(0);
  1029  017E  3000               	movlw	0
  1030  017F  120A  118A  2416  120A  118A  	fcall	_spiWrite
  1031  0184                     l1801:
  1032                           
  1033                           ;main.c: 124:         valorC = spiRead();
  1034  0184  120A  118A  23FE  120A  118A  	fcall	_spiRead
  1035  0189  1283               	bcf	3,5	;RP0=0, select bank0
  1036  018A  1303               	bcf	3,6	;RP1=0, select bank0
  1037  018B  00E0               	movwf	??_main
  1038  018C  0860               	movf	??_main,w
  1039  018D  00B4               	movwf	_valorC
  1040  018E                     l1803:
  1041                           
  1042                           ;main.c: 125:         _delay((unsigned long)((10)*(8000000/4000.0)));
  1043  018E  301A               	movlw	26
  1044  018F  1283               	bcf	3,5	;RP0=0, select bank0
  1045  0190  1303               	bcf	3,6	;RP1=0, select bank0
  1046  0191  00E1               	movwf	??_main+1
  1047  0192  30F7               	movlw	247
  1048  0193  00E0               	movwf	??_main
  1049  0194                     u1427:
  1050  0194  0BE0               	decfsz	??_main,f
  1051  0195  2994               	goto	u1427
  1052  0196  0BE1               	decfsz	??_main+1,f
  1053  0197  2994               	goto	u1427
  1054  0198  2999               	nop2
  1055  0199                     l1805:
  1056                           
  1057                           ;main.c: 126:         PORTCbits.RC2 = 1;
  1058  0199  1283               	bcf	3,5	;RP0=0, select bank0
  1059  019A  1303               	bcf	3,6	;RP1=0, select bank0
  1060  019B  1507               	bsf	7,2	;volatile
  1061  019C                     l1807:
  1062                           
  1063                           ;main.c: 127:         _delay((unsigned long)((200)*(8000000/4000.0)));
  1064  019C  3003               	movlw	3
  1065  019D  1283               	bcf	3,5	;RP0=0, select bank0
  1066  019E  1303               	bcf	3,6	;RP1=0, select bank0
  1067  019F  00E2               	movwf	??_main+2
  1068  01A0  3008               	movlw	8
  1069  01A1  00E1               	movwf	??_main+1
  1070  01A2  3076               	movlw	118
  1071  01A3  00E0               	movwf	??_main
  1072  01A4                     u1437:
  1073  01A4  0BE0               	decfsz	??_main,f
  1074  01A5  29A4               	goto	u1437
  1075  01A6  0BE1               	decfsz	??_main+1,f
  1076  01A7  29A4               	goto	u1437
  1077  01A8  0BE2               	decfsz	??_main+2,f
  1078  01A9  29A4               	goto	u1437
  1079  01AA  0000               	nop
  1080  01AB                     l1809:
  1081                           
  1082                           ;main.c: 128:         Lcd_Set_Cursor(2, 7);
  1083  01AB  3007               	movlw	7
  1084  01AC  1283               	bcf	3,5	;RP0=0, select bank0
  1085  01AD  1303               	bcf	3,6	;RP1=0, select bank0
  1086  01AE  00E0               	movwf	??_main
  1087  01AF  0860               	movf	??_main,w
  1088  01B0  00F7               	movwf	Lcd_Set_Cursor@b
  1089  01B1  3002               	movlw	2
  1090  01B2  120A  118A  2332  120A  118A  	fcall	_Lcd_Set_Cursor
  1091                           
  1092                           ;main.c: 129:         sprintf(s, "%d", valorC);
  1093  01B7  3020               	movlw	(low ((STR_3-__stringbase)| (0+32768)))& (0+255)
  1094  01B8  1283               	bcf	3,5	;RP0=0, select bank0
  1095  01B9  1303               	bcf	3,6	;RP1=0, select bank0
  1096  01BA  00E0               	movwf	??_main
  1097  01BB  0860               	movf	??_main,w
  1098  01BC  00D3               	movwf	sprintf@f
  1099  01BD  0834               	movf	_valorC,w
  1100  01BE  00E1               	movwf	??_main+1
  1101  01BF  01E2               	clrf	??_main+2
  1102  01C0  0861               	movf	??_main+1,w
  1103  01C1  00D4               	movwf	?_sprintf+1
  1104  01C2  0862               	movf	??_main+2,w
  1105  01C3  00D5               	movwf	?_sprintf+2
  1106  01C4  3036               	movlw	(low (_s| 0))& (0+255)
  1107  01C5  120A  118A  2029  120A  118A  	fcall	_sprintf
  1108                           
  1109                           ;main.c: 130:         Lcd_Write_String(s);
  1110  01CA  3036               	movlw	(low (_s| 0))& (0+255)
  1111  01CB  00F6               	movwf	Lcd_Write_String@a
  1112  01CC  3000               	movlw	0
  1113  01CD  00F7               	movwf	Lcd_Write_String@a+1
  1114  01CE  120A  118A  2273  120A  118A  	fcall	_Lcd_Write_String
  1115  01D3                     l1811:
  1116                           
  1117                           ;main.c: 131:         _delay((unsigned long)((100)*(8000000/4000.0)));
  1118  01D3  3002               	movlw	2
  1119  01D4  1283               	bcf	3,5	;RP0=0, select bank0
  1120  01D5  1303               	bcf	3,6	;RP1=0, select bank0
  1121  01D6  00E2               	movwf	??_main+2
  1122  01D7  3004               	movlw	4
  1123  01D8  00E1               	movwf	??_main+1
  1124  01D9  30B9               	movlw	185
  1125  01DA  00E0               	movwf	??_main
  1126  01DB                     u1447:
  1127  01DB  0BE0               	decfsz	??_main,f
  1128  01DC  29DB               	goto	u1447
  1129  01DD  0BE1               	decfsz	??_main+1,f
  1130  01DE  29DB               	goto	u1447
  1131  01DF  0BE2               	decfsz	??_main+2,f
  1132  01E0  29DB               	goto	u1447
  1133  01E1  29E2               	nop2
  1134  01E2  2935               	goto	l1783
  1135  01E3  120A  118A  280C   	ljmp	start
  1136  01E6                     __end_of_main:
  1137                           
  1138                           	psect	text1
  1139  0029                     __ptext1:	
  1140 ;; *************** function _sprintf *****************
  1141 ;; Defined at:
  1142 ;;		line 505 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c"
  1143 ;; Parameters:    Size  Location     Type
  1144 ;;  sp              1    wreg     PTR unsigned char 
  1145 ;;		 -> s(20), 
  1146 ;;  f               1    9[BANK0 ] PTR const unsigned char 
  1147 ;;		 -> STR_3(3), 
  1148 ;; Auto vars:     Size  Location     Type
  1149 ;;  sp              1   20[BANK0 ] PTR unsigned char 
  1150 ;;		 -> s(20), 
  1151 ;;  tmpval          4    0        struct .
  1152 ;;  val             2   18[BANK0 ] unsigned int 
  1153 ;;  cp              2    0        PTR const unsigned char 
  1154 ;;  len             2    0        unsigned int 
  1155 ;;  c               1   21[BANK0 ] unsigned char 
  1156 ;;  prec            1   17[BANK0 ] char 
  1157 ;;  flag            1   16[BANK0 ] unsigned char 
  1158 ;;  ap              1   15[BANK0 ] PTR void [1]
  1159 ;;		 -> ?_sprintf(2), 
  1160 ;; Return value:  Size  Location     Type
  1161 ;;                  2    9[BANK0 ] int 
  1162 ;; Registers used:
  1163 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  1164 ;; Tracked objects:
  1165 ;;		On entry : 0/0
  1166 ;;		On exit  : 0/0
  1167 ;;		Unchanged: 0/0
  1168 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1169 ;;      Params:         0       3       0       0       0
  1170 ;;      Locals:         0       7       0       0       0
  1171 ;;      Temps:          0       3       0       0       0
  1172 ;;      Totals:         0      13       0       0       0
  1173 ;;Total ram usage:       13 bytes
  1174 ;; Hardware stack levels used:    1
  1175 ;; Hardware stack levels required when called:    2
  1176 ;; This function calls:
  1177 ;;		___lwdiv
  1178 ;;		___lwmod
  1179 ;; This function is called by:
  1180 ;;		_main
  1181 ;; This function uses a non-reentrant model
  1182 ;;
  1183                           
  1184                           
  1185                           ;psect for function _sprintf
  1186  0029                     _sprintf:
  1187                           
  1188                           ;incstack = 0
  1189                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  1190                           ;sprintf@sp stored from wreg
  1191  0029  1283               	bcf	3,5	;RP0=0, select bank0
  1192  002A  1303               	bcf	3,6	;RP1=0, select bank0
  1193  002B  00DE               	movwf	sprintf@sp
  1194  002C                     l1713:
  1195                           
  1196                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 505: sprintf(char
      +                           * sp, const char * f, ...);C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\
      +                          doprnt.c: 506: {;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          07:  va_list ap;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 5
      +                          12:  char c;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 521: 
      +                           signed char prec;;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c:
      +                           525:  unsigned char flag;
  1197  002C  3054               	movlw	(low ((?_sprintf| 0+1)))& (0+255)
  1198  002D  00D6               	movwf	??_sprintf
  1199  002E  0856               	movf	??_sprintf,w
  1200  002F  00D9               	movwf	sprintf@ap
  1201                           
  1202                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1203  0030  28FC               	goto	l1765
  1204  0031                     l1715:
  1205                           
  1206                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 555:   if(c != '%
      +                          ')
  1207  0031  3025               	movlw	37
  1208  0032  065F               	xorwf	sprintf@c,w
  1209  0033  1903               	btfsc	3,2
  1210  0034  2836               	goto	u1321
  1211  0035  2837               	goto	u1320
  1212  0036                     u1321:
  1213  0036  2843               	goto	l1721
  1214  0037                     u1320:
  1215  0037                     l1717:
  1216                           
  1217                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 557:   {;C:\Progr
      +                          am Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 558:    ((*sp++ = (c)));
  1218  0037  085F               	movf	sprintf@c,w
  1219  0038  00D6               	movwf	??_sprintf
  1220  0039  085E               	movf	sprintf@sp,w
  1221  003A  0084               	movwf	4
  1222  003B  0856               	movf	??_sprintf,w
  1223  003C  1383               	bcf	3,7	;select IRP bank0
  1224  003D  0080               	movwf	0
  1225  003E                     l1719:
  1226  003E  3001               	movlw	1
  1227  003F  00D6               	movwf	??_sprintf
  1228  0040  0856               	movf	??_sprintf,w
  1229  0041  07DE               	addwf	sprintf@sp,f
  1230                           
  1231                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 559:    continue;
  1232  0042  28FC               	goto	l1765
  1233  0043                     l1721:
  1234                           
  1235                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 565:   flag = 0;
  1236  0043  01DA               	clrf	sprintf@flag
  1237  0044                     l1725:	
  1238                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 661:   switch(c =
      +                           *f++) {
  1239                           
  1240  0044  3001               	movlw	1
  1241  0045  07D3               	addwf	sprintf@f,f
  1242  0046  30FF               	movlw	-1
  1243  0047  0753               	addwf	sprintf@f,w
  1244  0048  0084               	movwf	4
  1245  0049  120A  118A  230A  120A  118A  	fcall	stringdir
  1246  004E  00DF               	movwf	sprintf@c
  1247  004F  00D6               	movwf	??_sprintf
  1248  0050  01D7               	clrf	??_sprintf+1
  1249                           
  1250                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1251                           ; Switch size 1, requested type "simple"
  1252                           ; Number of cases is 1, Range of values is 0 to 0
  1253                           ; switch strategies available:
  1254                           ; Name         Instructions Cycles
  1255                           ; simple_byte            4     3 (average)
  1256                           ; direct_byte           11     8 (fixed)
  1257                           ; jumptable            260     6 (fixed)
  1258                           ;	Chosen strategy is simple_byte
  1259  0051  0857               	movf	??_sprintf+1,w
  1260  0052  3A00               	xorlw	0	; case 0
  1261  0053  1903               	skipnz
  1262  0054  2856               	goto	l1833
  1263  0055  28FC               	goto	l1765
  1264  0056                     l1833:
  1265                           
  1266                           ; Switch size 1, requested type "simple"
  1267                           ; Number of cases is 3, Range of values is 0 to 105
  1268                           ; switch strategies available:
  1269                           ; Name         Instructions Cycles
  1270                           ; simple_byte           10     6 (average)
  1271                           ; jumptable            260     6 (fixed)
  1272                           ;	Chosen strategy is simple_byte
  1273  0056  0856               	movf	??_sprintf,w
  1274  0057  3A00               	xorlw	0	; case 0
  1275  0058  1903               	skipnz
  1276  0059  290E               	goto	l1767
  1277  005A  3A64               	xorlw	100	; case 100
  1278  005B  1903               	skipnz
  1279  005C  2861               	goto	l1727
  1280  005D  3A0D               	xorlw	13	; case 105
  1281  005E  1903               	skipnz
  1282  005F  2861               	goto	l1727
  1283  0060  28FC               	goto	l1765
  1284  0061                     l1727:
  1285                           
  1286                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1279:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1285:     val = (unsigned
      +                           int)(*(int *)__va_arg((*(int **)ap), (int)0));
  1287  0061  0859               	movf	sprintf@ap,w
  1288  0062  0084               	movwf	4
  1289  0063  1383               	bcf	3,7	;select IRP bank0
  1290  0064  0800               	movf	0,w
  1291  0065  00DC               	movwf	sprintf@val
  1292  0066  0A84               	incf	4,f
  1293  0067  0800               	movf	0,w
  1294  0068  00DD               	movwf	sprintf@val+1
  1295  0069                     l1729:
  1296  0069  3002               	movlw	2
  1297  006A  00D6               	movwf	??_sprintf
  1298  006B  0856               	movf	??_sprintf,w
  1299  006C  07D9               	addwf	sprintf@ap,f
  1300  006D                     l1731:
  1301                           
  1302                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1287:    if((int)
      +                          val < 0) {
  1303  006D  1FDD               	btfss	sprintf@val+1,7
  1304  006E  2870               	goto	u1331
  1305  006F  2871               	goto	u1330
  1306  0070                     u1331:
  1307  0070  287A               	goto	l1737
  1308  0071                     u1330:
  1309  0071                     l1733:
  1310                           
  1311                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1288:     flag |=
      +                           0x03;
  1312  0071  3003               	movlw	3
  1313  0072  00D6               	movwf	??_sprintf
  1314  0073  0856               	movf	??_sprintf,w
  1315  0074  04DA               	iorwf	sprintf@flag,f
  1316  0075                     l1735:
  1317                           
  1318                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1289:     val = -
      +                          val;
  1319  0075  09DC               	comf	sprintf@val,f
  1320  0076  09DD               	comf	sprintf@val+1,f
  1321  0077  0ADC               	incf	sprintf@val,f
  1322  0078  1903               	skipnz
  1323  0079  0ADD               	incf	sprintf@val+1,f
  1324  007A                     l1737:
  1325                           
  1326                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1292:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1331:    for(c = 1 ; c !=
      +                           sizeof dpowers/sizeof dpowers[0] ; c++)
  1327  007A  01DF               	clrf	sprintf@c
  1328  007B  0ADF               	incf	sprintf@c,f
  1329  007C                     l1743:
  1330                           
  1331                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1332:     if(val 
      +                          < dpowers[c])
  1332  007C  085F               	movf	sprintf@c,w
  1333  007D  00D6               	movwf	??_sprintf
  1334  007E  0756               	addwf	??_sprintf,w
  1335  007F  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1336  0080  0084               	movwf	4
  1337  0081  120A  118A  230A  120A  118A  	fcall	stringdir
  1338  0086  00D7               	movwf	??_sprintf+1
  1339  0087  120A  118A  230A  120A  118A  	fcall	stringdir
  1340  008C  00D8               	movwf	??_sprintf+2
  1341  008D  0858               	movf	??_sprintf+2,w
  1342  008E  025D               	subwf	sprintf@val+1,w
  1343  008F  1D03               	skipz
  1344  0090  2893               	goto	u1345
  1345  0091  0857               	movf	??_sprintf+1,w
  1346  0092  025C               	subwf	sprintf@val,w
  1347  0093                     u1345:
  1348  0093  1803               	skipnc
  1349  0094  2896               	goto	u1341
  1350  0095  2897               	goto	u1340
  1351  0096                     u1341:
  1352  0096  2898               	goto	l1747
  1353  0097                     u1340:
  1354  0097  28A2               	goto	l1749
  1355  0098                     l1747:
  1356  0098  3001               	movlw	1
  1357  0099  00D6               	movwf	??_sprintf
  1358  009A  0856               	movf	??_sprintf,w
  1359  009B  07DF               	addwf	sprintf@c,f
  1360  009C  3005               	movlw	5
  1361  009D  065F               	xorwf	sprintf@c,w
  1362  009E  1D03               	btfss	3,2
  1363  009F  28A1               	goto	u1351
  1364  00A0  28A2               	goto	u1350
  1365  00A1                     u1351:
  1366  00A1  287C               	goto	l1743
  1367  00A2                     u1350:
  1368  00A2                     l1749:
  1369                           
  1370                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1448:   {;C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1464:    if(flag & 0x03)
  1371  00A2  085A               	movf	sprintf@flag,w
  1372  00A3  3903               	andlw	3
  1373  00A4  1903               	btfsc	3,2
  1374  00A5  28A7               	goto	u1361
  1375  00A6  28A8               	goto	u1360
  1376  00A7                     u1361:
  1377  00A7  28B3               	goto	l1755
  1378  00A8                     u1360:
  1379  00A8                     l1751:
  1380                           
  1381                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1465:     ((*sp++
      +                           = ('-')));
  1382  00A8  302D               	movlw	45
  1383  00A9  00D6               	movwf	??_sprintf
  1384  00AA  085E               	movf	sprintf@sp,w
  1385  00AB  0084               	movwf	4
  1386  00AC  0856               	movf	??_sprintf,w
  1387  00AD  1383               	bcf	3,7	;select IRP bank0
  1388  00AE  0080               	movwf	0
  1389  00AF                     l1753:
  1390  00AF  3001               	movlw	1
  1391  00B0  00D6               	movwf	??_sprintf
  1392  00B1  0856               	movf	??_sprintf,w
  1393  00B2  07DE               	addwf	sprintf@sp,f
  1394  00B3                     l1755:
  1395                           
  1396                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1495:   };C:\Prog
      +                          ram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1498:   prec = c;
  1397  00B3  085F               	movf	sprintf@c,w
  1398  00B4  00D6               	movwf	??_sprintf
  1399  00B5  0856               	movf	??_sprintf,w
  1400  00B6  00DB               	movwf	sprintf@prec
  1401                           
  1402                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1403  00B7  28F3               	goto	l1763
  1404  00B8                     l1757:
  1405                           
  1406                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1504:    {;C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1515:     c = (val / dpo
      +                          wers[(unsigned char)prec]) % 10 + '0';
  1407  00B8  300A               	movlw	10
  1408  00B9  00CD               	movwf	___lwmod@divisor
  1409  00BA  3000               	movlw	0
  1410  00BB  00CE               	movwf	___lwmod@divisor+1
  1411  00BC  085B               	movf	sprintf@prec,w
  1412  00BD  00D6               	movwf	??_sprintf
  1413  00BE  0756               	addwf	??_sprintf,w
  1414  00BF  3E01               	addlw	low ((_dpowers-__stringbase)| (0+32768))
  1415  00C0  0084               	movwf	4
  1416  00C1  120A  118A  230A  120A  118A  	fcall	stringdir
  1417  00C6  00F3               	movwf	___lwdiv@divisor
  1418  00C7  120A  118A  230A  120A  118A  	fcall	stringdir
  1419  00CC  00F4               	movwf	___lwdiv@divisor+1
  1420  00CD  085D               	movf	sprintf@val+1,w
  1421  00CE  00F6               	movwf	___lwdiv@dividend+1
  1422  00CF  085C               	movf	sprintf@val,w
  1423  00D0  00F5               	movwf	___lwdiv@dividend
  1424  00D1  120A  118A  222D  120A  118A  	fcall	___lwdiv
  1425  00D6  0874               	movf	?___lwdiv+1,w
  1426  00D7  1283               	bcf	3,5	;RP0=0, select bank0
  1427  00D8  1303               	bcf	3,6	;RP1=0, select bank0
  1428  00D9  00D0               	movwf	___lwmod@dividend+1
  1429  00DA  0873               	movf	?___lwdiv,w
  1430  00DB  00CF               	movwf	___lwmod@dividend
  1431  00DC  120A  118A  22B9  120A  118A  	fcall	___lwmod
  1432  00E1  1283               	bcf	3,5	;RP0=0, select bank0
  1433  00E2  1303               	bcf	3,6	;RP1=0, select bank0
  1434  00E3  084D               	movf	?___lwmod,w
  1435  00E4  3E30               	addlw	48
  1436  00E5  00D7               	movwf	??_sprintf+1
  1437  00E6  0857               	movf	??_sprintf+1,w
  1438  00E7  00DF               	movwf	sprintf@c
  1439  00E8                     l1759:
  1440                           
  1441                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1549:    };C:\Pro
      +                          gram Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1550:    ((*sp++ = (c)))
      +                          ;
  1442  00E8  085F               	movf	sprintf@c,w
  1443  00E9  00D6               	movwf	??_sprintf
  1444  00EA  085E               	movf	sprintf@sp,w
  1445  00EB  0084               	movwf	4
  1446  00EC  0856               	movf	??_sprintf,w
  1447  00ED  1383               	bcf	3,7	;select IRP bank0
  1448  00EE  0080               	movwf	0
  1449  00EF                     l1761:
  1450  00EF  3001               	movlw	1
  1451  00F0  00D6               	movwf	??_sprintf
  1452  00F1  0856               	movf	??_sprintf,w
  1453  00F2  07DE               	addwf	sprintf@sp,f
  1454  00F3                     l1763:
  1455                           
  1456                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1500:   while(pre
      +                          c--) {
  1457  00F3  30FF               	movlw	255
  1458  00F4  00D6               	movwf	??_sprintf
  1459  00F5  0856               	movf	??_sprintf,w
  1460  00F6  07DB               	addwf	sprintf@prec,f
  1461  00F7  0A5B               	incf	sprintf@prec,w
  1462  00F8  1D03               	btfss	3,2
  1463  00F9  28FB               	goto	u1371
  1464  00FA  28FC               	goto	u1370
  1465  00FB                     u1371:
  1466  00FB  28B8               	goto	l1757
  1467  00FC                     u1370:
  1468  00FC                     l1765:
  1469                           
  1470                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 553:  while((c = 
      +                          *f++)) {
  1471  00FC  3001               	movlw	1
  1472  00FD  07D3               	addwf	sprintf@f,f
  1473  00FE  30FF               	movlw	-1
  1474  00FF  0753               	addwf	sprintf@f,w
  1475  0100  0084               	movwf	4
  1476  0101  120A  118A  230A  120A  118A  	fcall	stringdir
  1477  0106  00D6               	movwf	??_sprintf
  1478  0107  0856               	movf	??_sprintf,w
  1479  0108  00DF               	movwf	sprintf@c
  1480  0109  085F               	movf	sprintf@c,w
  1481  010A  1D03               	btfss	3,2
  1482  010B  290D               	goto	u1381
  1483  010C  290E               	goto	u1380
  1484  010D                     u1381:
  1485  010D  2831               	goto	l1715
  1486  010E                     u1380:
  1487  010E                     l1767:
  1488                           
  1489                           ;C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\doprnt.c: 1564:  *sp = 0;
  1490  010E  085E               	movf	sprintf@sp,w
  1491  010F  0084               	movwf	4
  1492  0110  1383               	bcf	3,7	;select IRP bank0
  1493  0111  0180               	clrf	0
  1494  0112                     l319:
  1495  0112  0008               	return
  1496  0113                     __end_of_sprintf:
  1497                           
  1498                           	psect	text2
  1499  02B9                     __ptext2:	
  1500 ;; *************** function ___lwmod *****************
  1501 ;; Defined at:
  1502 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwmod.c"
  1503 ;; Parameters:    Size  Location     Type
  1504 ;;  divisor         2    3[BANK0 ] unsigned int 
  1505 ;;  dividend        2    5[BANK0 ] unsigned int 
  1506 ;; Auto vars:     Size  Location     Type
  1507 ;;  counter         1    8[BANK0 ] unsigned char 
  1508 ;; Return value:  Size  Location     Type
  1509 ;;                  2    3[BANK0 ] unsigned int 
  1510 ;; Registers used:
  1511 ;;		wreg, status,2, status,0
  1512 ;; Tracked objects:
  1513 ;;		On entry : 0/0
  1514 ;;		On exit  : 0/0
  1515 ;;		Unchanged: 0/0
  1516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1517 ;;      Params:         0       4       0       0       0
  1518 ;;      Locals:         0       1       0       0       0
  1519 ;;      Temps:          0       1       0       0       0
  1520 ;;      Totals:         0       6       0       0       0
  1521 ;;Total ram usage:        6 bytes
  1522 ;; Hardware stack levels used:    1
  1523 ;; Hardware stack levels required when called:    1
  1524 ;; This function calls:
  1525 ;;		Nothing
  1526 ;; This function is called by:
  1527 ;;		_sprintf
  1528 ;; This function uses a non-reentrant model
  1529 ;;
  1530                           
  1531                           
  1532                           ;psect for function ___lwmod
  1533  02B9                     ___lwmod:
  1534  02B9                     l1191:	
  1535                           ;incstack = 0
  1536                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1537                           
  1538  02B9  1283               	bcf	3,5	;RP0=0, select bank0
  1539  02BA  1303               	bcf	3,6	;RP1=0, select bank0
  1540  02BB  084D               	movf	___lwmod@divisor,w
  1541  02BC  044E               	iorwf	___lwmod@divisor+1,w
  1542  02BD  1903               	btfsc	3,2
  1543  02BE  2AC0               	goto	u441
  1544  02BF  2AC1               	goto	u440
  1545  02C0                     u441:
  1546  02C0  2AF0               	goto	l1209
  1547  02C1                     u440:
  1548  02C1                     l1193:
  1549  02C1  01D2               	clrf	___lwmod@counter
  1550  02C2  0AD2               	incf	___lwmod@counter,f
  1551  02C3  2ACF               	goto	l1199
  1552  02C4                     l1195:
  1553  02C4  3001               	movlw	1
  1554  02C5                     u455:
  1555  02C5  1003               	clrc
  1556  02C6  0DCD               	rlf	___lwmod@divisor,f
  1557  02C7  0DCE               	rlf	___lwmod@divisor+1,f
  1558  02C8  3EFF               	addlw	-1
  1559  02C9  1D03               	skipz
  1560  02CA  2AC5               	goto	u455
  1561  02CB                     l1197:
  1562  02CB  3001               	movlw	1
  1563  02CC  00D1               	movwf	??___lwmod
  1564  02CD  0851               	movf	??___lwmod,w
  1565  02CE  07D2               	addwf	___lwmod@counter,f
  1566  02CF                     l1199:
  1567  02CF  1FCE               	btfss	___lwmod@divisor+1,7
  1568  02D0  2AD2               	goto	u461
  1569  02D1  2AD3               	goto	u460
  1570  02D2                     u461:
  1571  02D2  2AC4               	goto	l1195
  1572  02D3                     u460:
  1573  02D3                     l1201:
  1574  02D3  084E               	movf	___lwmod@divisor+1,w
  1575  02D4  0250               	subwf	___lwmod@dividend+1,w
  1576  02D5  1D03               	skipz
  1577  02D6  2AD9               	goto	u475
  1578  02D7  084D               	movf	___lwmod@divisor,w
  1579  02D8  024F               	subwf	___lwmod@dividend,w
  1580  02D9                     u475:
  1581  02D9  1C03               	skipc
  1582  02DA  2ADC               	goto	u471
  1583  02DB  2ADD               	goto	u470
  1584  02DC                     u471:
  1585  02DC  2AE3               	goto	l1205
  1586  02DD                     u470:
  1587  02DD                     l1203:
  1588  02DD  084D               	movf	___lwmod@divisor,w
  1589  02DE  02CF               	subwf	___lwmod@dividend,f
  1590  02DF  084E               	movf	___lwmod@divisor+1,w
  1591  02E0  1C03               	skipc
  1592  02E1  03D0               	decf	___lwmod@dividend+1,f
  1593  02E2  02D0               	subwf	___lwmod@dividend+1,f
  1594  02E3                     l1205:
  1595  02E3  3001               	movlw	1
  1596  02E4                     u485:
  1597  02E4  1003               	clrc
  1598  02E5  0CCE               	rrf	___lwmod@divisor+1,f
  1599  02E6  0CCD               	rrf	___lwmod@divisor,f
  1600  02E7  3EFF               	addlw	-1
  1601  02E8  1D03               	skipz
  1602  02E9  2AE4               	goto	u485
  1603  02EA                     l1207:
  1604  02EA  3001               	movlw	1
  1605  02EB  02D2               	subwf	___lwmod@counter,f
  1606  02EC  1D03               	btfss	3,2
  1607  02ED  2AEF               	goto	u491
  1608  02EE  2AF0               	goto	u490
  1609  02EF                     u491:
  1610  02EF  2AD3               	goto	l1201
  1611  02F0                     u490:
  1612  02F0                     l1209:
  1613  02F0  0850               	movf	___lwmod@dividend+1,w
  1614  02F1  00CE               	movwf	?___lwmod+1
  1615  02F2  084F               	movf	___lwmod@dividend,w
  1616  02F3  00CD               	movwf	?___lwmod
  1617  02F4                     l605:
  1618  02F4  0008               	return
  1619  02F5                     __end_of___lwmod:
  1620                           
  1621                           	psect	text3
  1622  022D                     __ptext3:	
  1623 ;; *************** function ___lwdiv *****************
  1624 ;; Defined at:
  1625 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.31\pic\sources\c90\common\lwdiv.c"
  1626 ;; Parameters:    Size  Location     Type
  1627 ;;  divisor         2    3[COMMON] unsigned int 
  1628 ;;  dividend        2    5[COMMON] unsigned int 
  1629 ;; Auto vars:     Size  Location     Type
  1630 ;;  quotient        2    1[BANK0 ] unsigned int 
  1631 ;;  counter         1    0[BANK0 ] unsigned char 
  1632 ;; Return value:  Size  Location     Type
  1633 ;;                  2    3[COMMON] unsigned int 
  1634 ;; Registers used:
  1635 ;;		wreg, status,2, status,0
  1636 ;; Tracked objects:
  1637 ;;		On entry : 0/0
  1638 ;;		On exit  : 0/0
  1639 ;;		Unchanged: 0/0
  1640 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1641 ;;      Params:         4       0       0       0       0
  1642 ;;      Locals:         0       3       0       0       0
  1643 ;;      Temps:          1       0       0       0       0
  1644 ;;      Totals:         5       3       0       0       0
  1645 ;;Total ram usage:        8 bytes
  1646 ;; Hardware stack levels used:    1
  1647 ;; Hardware stack levels required when called:    1
  1648 ;; This function calls:
  1649 ;;		Nothing
  1650 ;; This function is called by:
  1651 ;;		_sprintf
  1652 ;; This function uses a non-reentrant model
  1653 ;;
  1654                           
  1655                           
  1656                           ;psect for function ___lwdiv
  1657  022D                     ___lwdiv:
  1658  022D                     l1655:	
  1659                           ;incstack = 0
  1660                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1661                           
  1662  022D  1283               	bcf	3,5	;RP0=0, select bank0
  1663  022E  1303               	bcf	3,6	;RP1=0, select bank0
  1664  022F  01CB               	clrf	___lwdiv@quotient
  1665  0230  01CC               	clrf	___lwdiv@quotient+1
  1666  0231                     l1657:
  1667  0231  0873               	movf	___lwdiv@divisor,w
  1668  0232  0474               	iorwf	___lwdiv@divisor+1,w
  1669  0233  1903               	btfsc	3,2
  1670  0234  2A36               	goto	u1201
  1671  0235  2A37               	goto	u1200
  1672  0236                     u1201:
  1673  0236  2A6E               	goto	l1677
  1674  0237                     u1200:
  1675  0237                     l1659:
  1676  0237  01CA               	clrf	___lwdiv@counter
  1677  0238  0ACA               	incf	___lwdiv@counter,f
  1678  0239  2A45               	goto	l1665
  1679  023A                     l1661:
  1680  023A  3001               	movlw	1
  1681  023B                     u1215:
  1682  023B  1003               	clrc
  1683  023C  0DF3               	rlf	___lwdiv@divisor,f
  1684  023D  0DF4               	rlf	___lwdiv@divisor+1,f
  1685  023E  3EFF               	addlw	-1
  1686  023F  1D03               	skipz
  1687  0240  2A3B               	goto	u1215
  1688  0241                     l1663:
  1689  0241  3001               	movlw	1
  1690  0242  00F7               	movwf	??___lwdiv
  1691  0243  0877               	movf	??___lwdiv,w
  1692  0244  07CA               	addwf	___lwdiv@counter,f
  1693  0245                     l1665:
  1694  0245  1FF4               	btfss	___lwdiv@divisor+1,7
  1695  0246  2A48               	goto	u1221
  1696  0247  2A49               	goto	u1220
  1697  0248                     u1221:
  1698  0248  2A3A               	goto	l1661
  1699  0249                     u1220:
  1700  0249                     l1667:
  1701  0249  3001               	movlw	1
  1702  024A                     u1235:
  1703  024A  1003               	clrc
  1704  024B  0DCB               	rlf	___lwdiv@quotient,f
  1705  024C  0DCC               	rlf	___lwdiv@quotient+1,f
  1706  024D  3EFF               	addlw	-1
  1707  024E  1D03               	skipz
  1708  024F  2A4A               	goto	u1235
  1709  0250  0874               	movf	___lwdiv@divisor+1,w
  1710  0251  0276               	subwf	___lwdiv@dividend+1,w
  1711  0252  1D03               	skipz
  1712  0253  2A56               	goto	u1245
  1713  0254  0873               	movf	___lwdiv@divisor,w
  1714  0255  0275               	subwf	___lwdiv@dividend,w
  1715  0256                     u1245:
  1716  0256  1C03               	skipc
  1717  0257  2A59               	goto	u1241
  1718  0258  2A5A               	goto	u1240
  1719  0259                     u1241:
  1720  0259  2A61               	goto	l1673
  1721  025A                     u1240:
  1722  025A                     l1669:
  1723  025A  0873               	movf	___lwdiv@divisor,w
  1724  025B  02F5               	subwf	___lwdiv@dividend,f
  1725  025C  0874               	movf	___lwdiv@divisor+1,w
  1726  025D  1C03               	skipc
  1727  025E  03F6               	decf	___lwdiv@dividend+1,f
  1728  025F  02F6               	subwf	___lwdiv@dividend+1,f
  1729  0260                     l1671:
  1730  0260  144B               	bsf	___lwdiv@quotient,0
  1731  0261                     l1673:
  1732  0261  3001               	movlw	1
  1733  0262                     u1255:
  1734  0262  1003               	clrc
  1735  0263  0CF4               	rrf	___lwdiv@divisor+1,f
  1736  0264  0CF3               	rrf	___lwdiv@divisor,f
  1737  0265  3EFF               	addlw	-1
  1738  0266  1D03               	skipz
  1739  0267  2A62               	goto	u1255
  1740  0268                     l1675:
  1741  0268  3001               	movlw	1
  1742  0269  02CA               	subwf	___lwdiv@counter,f
  1743  026A  1D03               	btfss	3,2
  1744  026B  2A6D               	goto	u1261
  1745  026C  2A6E               	goto	u1260
  1746  026D                     u1261:
  1747  026D  2A49               	goto	l1667
  1748  026E                     u1260:
  1749  026E                     l1677:
  1750  026E  084C               	movf	___lwdiv@quotient+1,w
  1751  026F  00F4               	movwf	?___lwdiv+1
  1752  0270  084B               	movf	___lwdiv@quotient,w
  1753  0271  00F3               	movwf	?___lwdiv
  1754  0272                     l595:
  1755  0272  0008               	return
  1756  0273                     __end_of___lwdiv:
  1757                           
  1758                           	psect	text4
  1759  0416                     __ptext4:	
  1760 ;; *************** function _spiWrite *****************
  1761 ;; Defined at:
  1762 ;;		line 35 in file "SPI.c"
  1763 ;; Parameters:    Size  Location     Type
  1764 ;;  dat             1    wreg     unsigned char 
  1765 ;; Auto vars:     Size  Location     Type
  1766 ;;  dat             1    3[COMMON] unsigned char 
  1767 ;; Return value:  Size  Location     Type
  1768 ;;                  1    wreg      void 
  1769 ;; Registers used:
  1770 ;;		wreg
  1771 ;; Tracked objects:
  1772 ;;		On entry : 0/0
  1773 ;;		On exit  : 0/0
  1774 ;;		Unchanged: 0/0
  1775 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1776 ;;      Params:         0       0       0       0       0
  1777 ;;      Locals:         1       0       0       0       0
  1778 ;;      Temps:          0       0       0       0       0
  1779 ;;      Totals:         1       0       0       0       0
  1780 ;;Total ram usage:        1 bytes
  1781 ;; Hardware stack levels used:    1
  1782 ;; Hardware stack levels required when called:    1
  1783 ;; This function calls:
  1784 ;;		Nothing
  1785 ;; This function is called by:
  1786 ;;		_main
  1787 ;; This function uses a non-reentrant model
  1788 ;;
  1789                           
  1790                           
  1791                           ;psect for function _spiWrite
  1792  0416                     _spiWrite:
  1793                           
  1794                           ;incstack = 0
  1795                           ; Regs used in _spiWrite: [wreg]
  1796                           ;spiWrite@dat stored from wreg
  1797  0416  00F3               	movwf	spiWrite@dat
  1798  0417                     l1287:
  1799                           
  1800                           ;SPI.c: 35: void spiWrite(char dat);SPI.c: 36: {;SPI.c: 37:     SSPBUF = dat;
  1801  0417  0873               	movf	spiWrite@dat,w
  1802  0418  1283               	bcf	3,5	;RP0=0, select bank0
  1803  0419  1303               	bcf	3,6	;RP1=0, select bank0
  1804  041A  0093               	movwf	19	;volatile
  1805  041B                     l201:
  1806  041B  0008               	return
  1807  041C                     __end_of_spiWrite:
  1808                           
  1809                           	psect	text5
  1810  03FE                     __ptext5:	
  1811 ;; *************** function _spiRead *****************
  1812 ;; Defined at:
  1813 ;;		line 48 in file "SPI.c"
  1814 ;; Parameters:    Size  Location     Type
  1815 ;;		None
  1816 ;; Auto vars:     Size  Location     Type
  1817 ;;		None
  1818 ;; Return value:  Size  Location     Type
  1819 ;;                  1    wreg      unsigned char 
  1820 ;; Registers used:
  1821 ;;		wreg, status,2, status,0, pclath, cstack
  1822 ;; Tracked objects:
  1823 ;;		On entry : 0/0
  1824 ;;		On exit  : 0/0
  1825 ;;		Unchanged: 0/0
  1826 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1827 ;;      Params:         0       0       0       0       0
  1828 ;;      Locals:         0       0       0       0       0
  1829 ;;      Temps:          0       0       0       0       0
  1830 ;;      Totals:         0       0       0       0       0
  1831 ;;Total ram usage:        0 bytes
  1832 ;; Hardware stack levels used:    1
  1833 ;; Hardware stack levels required when called:    2
  1834 ;; This function calls:
  1835 ;;		_spiReceiveWait
  1836 ;; This function is called by:
  1837 ;;		_main
  1838 ;; This function uses a non-reentrant model
  1839 ;;
  1840                           
  1841                           
  1842                           ;psect for function _spiRead
  1843  03FE                     _spiRead:
  1844  03FE                     l1289:	
  1845                           ;incstack = 0
  1846                           ; Regs used in _spiRead: [wreg+status,2+status,0+pclath+cstack]
  1847                           
  1848                           
  1849                           ;SPI.c: 50:     spiReceiveWait();
  1850  03FE  120A  118A  240F  120A  118A  	fcall	_spiReceiveWait
  1851  0403                     l1291:
  1852                           
  1853                           ;SPI.c: 51:     return(SSPBUF);
  1854  0403  1283               	bcf	3,5	;RP0=0, select bank0
  1855  0404  1303               	bcf	3,6	;RP1=0, select bank0
  1856  0405  0813               	movf	19,w	;volatile
  1857  0406                     l209:
  1858  0406  0008               	return
  1859  0407                     __end_of_spiRead:
  1860                           
  1861                           	psect	text6
  1862  040F                     __ptext6:	
  1863 ;; *************** function _spiReceiveWait *****************
  1864 ;; Defined at:
  1865 ;;		line 30 in file "SPI.c"
  1866 ;; Parameters:    Size  Location     Type
  1867 ;;		None
  1868 ;; Auto vars:     Size  Location     Type
  1869 ;;		None
  1870 ;; Return value:  Size  Location     Type
  1871 ;;                  1    wreg      void 
  1872 ;; Registers used:
  1873 ;;		None
  1874 ;; Tracked objects:
  1875 ;;		On entry : 0/0
  1876 ;;		On exit  : 0/0
  1877 ;;		Unchanged: 0/0
  1878 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1879 ;;      Params:         0       0       0       0       0
  1880 ;;      Locals:         0       0       0       0       0
  1881 ;;      Temps:          0       0       0       0       0
  1882 ;;      Totals:         0       0       0       0       0
  1883 ;;Total ram usage:        0 bytes
  1884 ;; Hardware stack levels used:    1
  1885 ;; Hardware stack levels required when called:    1
  1886 ;; This function calls:
  1887 ;;		Nothing
  1888 ;; This function is called by:
  1889 ;;		_spiRead
  1890 ;; This function uses a non-reentrant model
  1891 ;;
  1892                           
  1893                           
  1894                           ;psect for function _spiReceiveWait
  1895  040F                     _spiReceiveWait:
  1896  040F                     l1163:	
  1897                           ;incstack = 0
  1898                           ; Regs used in _spiReceiveWait: []
  1899                           
  1900  040F                     l195:	
  1901                           ;SPI.c: 32:     while ( !SSPSTATbits.BF );
  1902                           
  1903  040F  1683               	bsf	3,5	;RP0=1, select bank1
  1904  0410  1303               	bcf	3,6	;RP1=0, select bank1
  1905  0411  1C14               	btfss	20,0	;volatile
  1906  0412  2C14               	goto	u361
  1907  0413  2C15               	goto	u360
  1908  0414                     u361:
  1909  0414  2C0F               	goto	l195
  1910  0415                     u360:
  1911  0415                     l198:
  1912  0415  0008               	return
  1913  0416                     __end_of_spiReceiveWait:
  1914                           
  1915                           	psect	text7
  1916  03A9                     __ptext7:	
  1917 ;; *************** function _spiInit *****************
  1918 ;; Defined at:
  1919 ;;		line 13 in file "SPI.c"
  1920 ;; Parameters:    Size  Location     Type
  1921 ;;  sType           1    wreg     enum E1264
  1922 ;;  sDataSample     1    3[COMMON] enum E1272
  1923 ;;  sClockIdle      1    4[COMMON] enum E1276
  1924 ;;  sTransmitEdg    1    5[COMMON] enum E1280
  1925 ;; Auto vars:     Size  Location     Type
  1926 ;;  sType           1    6[COMMON] enum E1264
  1927 ;; Return value:  Size  Location     Type
  1928 ;;                  1    wreg      void 
  1929 ;; Registers used:
  1930 ;;		wreg, status,2, status,0
  1931 ;; Tracked objects:
  1932 ;;		On entry : 0/0
  1933 ;;		On exit  : 0/0
  1934 ;;		Unchanged: 0/0
  1935 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1936 ;;      Params:         3       0       0       0       0
  1937 ;;      Locals:         1       0       0       0       0
  1938 ;;      Temps:          0       0       0       0       0
  1939 ;;      Totals:         4       0       0       0       0
  1940 ;;Total ram usage:        4 bytes
  1941 ;; Hardware stack levels used:    1
  1942 ;; Hardware stack levels required when called:    1
  1943 ;; This function calls:
  1944 ;;		Nothing
  1945 ;; This function is called by:
  1946 ;;		_main
  1947 ;; This function uses a non-reentrant model
  1948 ;;
  1949                           
  1950                           
  1951                           ;psect for function _spiInit
  1952  03A9                     _spiInit:
  1953                           
  1954                           ;incstack = 0
  1955                           ; Regs used in _spiInit: [wreg+status,2+status,0]
  1956                           ;spiInit@sType stored from wreg
  1957  03A9  00F6               	movwf	spiInit@sType
  1958  03AA                     l1233:
  1959                           
  1960                           ;SPI.c: 13: void spiInit(Spi_Type sType, Spi_Data_Sample sDataSample, Spi_Clock_Idle sCl
      +                          ockIdle, Spi_Transmit_Edge sTransmitEdge);SPI.c: 14: {;SPI.c: 15:     TRISC5 = 0;
  1961  03AA  1683               	bsf	3,5	;RP0=1, select bank1
  1962  03AB  1303               	bcf	3,6	;RP1=0, select bank1
  1963  03AC  1287               	bcf	7,5	;volatile
  1964                           
  1965                           ;SPI.c: 16:     if(sType & 0b00000100)
  1966  03AD  1D76               	btfss	spiInit@sType,2
  1967  03AE  2BB0               	goto	u501
  1968  03AF  2BB1               	goto	u500
  1969  03B0                     u501:
  1970  03B0  2BB5               	goto	l1239
  1971  03B1                     u500:
  1972  03B1                     l1235:
  1973                           
  1974                           ;SPI.c: 17:     {;SPI.c: 18:         SSPSTAT = sTransmitEdge;
  1975  03B1  0875               	movf	spiInit@sTransmitEdge,w
  1976  03B2  0094               	movwf	20	;volatile
  1977  03B3                     l1237:
  1978                           
  1979                           ;SPI.c: 19:         TRISC3 = 1;
  1980  03B3  1587               	bsf	7,3	;volatile
  1981                           
  1982                           ;SPI.c: 20:     }
  1983  03B4  2BB9               	goto	l191
  1984  03B5                     l1239:
  1985                           
  1986                           ;SPI.c: 22:     {;SPI.c: 23:         SSPSTAT = sDataSample | sTransmitEdge;
  1987  03B5  0873               	movf	spiInit@sDataSample,w
  1988  03B6  0475               	iorwf	spiInit@sTransmitEdge,w
  1989  03B7  0094               	movwf	20	;volatile
  1990  03B8                     l1241:
  1991                           
  1992                           ;SPI.c: 24:         TRISC3 = 0;
  1993  03B8  1187               	bcf	7,3	;volatile
  1994  03B9                     l191:	
  1995                           ;SPI.c: 25:     }
  1996                           
  1997                           
  1998                           ;SPI.c: 27:     SSPCON = sType | sClockIdle;
  1999  03B9  0876               	movf	spiInit@sType,w
  2000  03BA  0474               	iorwf	spiInit@sClockIdle,w
  2001  03BB  1283               	bcf	3,5	;RP0=0, select bank0
  2002  03BC  1303               	bcf	3,6	;RP1=0, select bank0
  2003  03BD  0094               	movwf	20	;volatile
  2004  03BE                     l192:
  2005  03BE  0008               	return
  2006  03BF                     __end_of_spiInit:
  2007                           
  2008                           	psect	text8
  2009  03BF                     __ptext8:	
  2010 ;; *************** function _setup *****************
  2011 ;; Defined at:
  2012 ;;		line 186 in file "main.c"
  2013 ;; Parameters:    Size  Location     Type
  2014 ;;		None
  2015 ;; Auto vars:     Size  Location     Type
  2016 ;;		None
  2017 ;; Return value:  Size  Location     Type
  2018 ;;                  1    wreg      void 
  2019 ;; Registers used:
  2020 ;;		wreg, status,2
  2021 ;; Tracked objects:
  2022 ;;		On entry : 0/0
  2023 ;;		On exit  : 0/0
  2024 ;;		Unchanged: 0/0
  2025 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2026 ;;      Params:         0       0       0       0       0
  2027 ;;      Locals:         0       0       0       0       0
  2028 ;;      Temps:          0       0       0       0       0
  2029 ;;      Totals:         0       0       0       0       0
  2030 ;;Total ram usage:        0 bytes
  2031 ;; Hardware stack levels used:    1
  2032 ;; Hardware stack levels required when called:    1
  2033 ;; This function calls:
  2034 ;;		Nothing
  2035 ;; This function is called by:
  2036 ;;		_main
  2037 ;; This function uses a non-reentrant model
  2038 ;;
  2039                           
  2040                           
  2041                           ;psect for function _setup
  2042  03BF                     _setup:
  2043  03BF                     l1213:	
  2044                           ;incstack = 0
  2045                           ; Regs used in _setup: [wreg+status,2]
  2046                           
  2047                           
  2048                           ;main.c: 187:     TRISD = 0b00000000;
  2049  03BF  1683               	bsf	3,5	;RP0=1, select bank1
  2050  03C0  1303               	bcf	3,6	;RP1=0, select bank1
  2051  03C1  0188               	clrf	8	;volatile
  2052  03C2                     l1215:
  2053                           
  2054                           ;main.c: 188:     TRISC = 0b10010000;
  2055  03C2  3090               	movlw	144
  2056  03C3  0087               	movwf	7	;volatile
  2057  03C4                     l1217:
  2058                           
  2059                           ;main.c: 189:     TRISE = 0b00000000;
  2060  03C4  0189               	clrf	9	;volatile
  2061  03C5                     l1219:
  2062                           
  2063                           ;main.c: 190:     TRISB = 0b00000000;
  2064  03C5  0186               	clrf	6	;volatile
  2065  03C6                     l1221:
  2066                           
  2067                           ;main.c: 191:     ANSEL = 0b00000011;
  2068  03C6  3003               	movlw	3
  2069  03C7  1683               	bsf	3,5	;RP0=1, select bank3
  2070  03C8  1703               	bsf	3,6	;RP1=1, select bank3
  2071  03C9  0088               	movwf	8	;volatile
  2072  03CA                     l1223:
  2073                           
  2074                           ;main.c: 192:     PORTCbits.RC0 = 1;
  2075  03CA  1283               	bcf	3,5	;RP0=0, select bank0
  2076  03CB  1303               	bcf	3,6	;RP1=0, select bank0
  2077  03CC  1407               	bsf	7,0	;volatile
  2078  03CD                     l1225:
  2079                           
  2080                           ;main.c: 193:     PORTCbits.RC1 = 1;
  2081  03CD  1487               	bsf	7,1	;volatile
  2082  03CE                     l1227:
  2083                           
  2084                           ;main.c: 194:     PORTCbits.RC2 = 0;
  2085  03CE  1107               	bcf	7,2	;volatile
  2086  03CF                     l1229:
  2087                           
  2088                           ;main.c: 195:     PORTCbits.RC6 = 0;
  2089  03CF  1307               	bcf	7,6	;volatile
  2090  03D0                     l1231:
  2091                           
  2092                           ;main.c: 196:     PORTCbits.RC7 = 0;
  2093  03D0  1387               	bcf	7,7	;volatile
  2094                           
  2095                           ;main.c: 197:     PORTD = 0;
  2096  03D1  0188               	clrf	8	;volatile
  2097                           
  2098                           ;main.c: 198:     PORTE = 0;
  2099  03D2  0189               	clrf	9	;volatile
  2100                           
  2101                           ;main.c: 199:     PORTB = 0;
  2102  03D3  0186               	clrf	6	;volatile
  2103  03D4                     l88:
  2104  03D4  0008               	return
  2105  03D5                     __end_of_setup:
  2106                           
  2107                           	psect	text9
  2108  03F3                     __ptext9:	
  2109 ;; *************** function _recibir *****************
  2110 ;; Defined at:
  2111 ;;		line 40 in file "USART.c"
  2112 ;; Parameters:    Size  Location     Type
  2113 ;;		None
  2114 ;; Auto vars:     Size  Location     Type
  2115 ;;		None
  2116 ;; Return value:  Size  Location     Type
  2117 ;;                  1    wreg      void 
  2118 ;; Registers used:
  2119 ;;		None
  2120 ;; Tracked objects:
  2121 ;;		On entry : 0/0
  2122 ;;		On exit  : 0/0
  2123 ;;		Unchanged: 0/0
  2124 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2125 ;;      Params:         0       0       0       0       0
  2126 ;;      Locals:         0       0       0       0       0
  2127 ;;      Temps:          0       0       0       0       0
  2128 ;;      Totals:         0       0       0       0       0
  2129 ;;Total ram usage:        0 bytes
  2130 ;; Hardware stack levels used:    1
  2131 ;; Hardware stack levels required when called:    1
  2132 ;; This function calls:
  2133 ;;		Nothing
  2134 ;; This function is called by:
  2135 ;;		_main
  2136 ;; This function uses a non-reentrant model
  2137 ;;
  2138                           
  2139                           
  2140                           ;psect for function _recibir
  2141  03F3                     _recibir:
  2142  03F3                     l1253:	
  2143                           ;incstack = 0
  2144                           ; Regs used in _recibir: []
  2145                           
  2146                           
  2147                           ;USART.c: 41:     RCSTAbits.CREN = 1;
  2148  03F3  1283               	bcf	3,5	;RP0=0, select bank0
  2149  03F4  1303               	bcf	3,6	;RP1=0, select bank0
  2150  03F5  1618               	bsf	24,4	;volatile
  2151                           
  2152                           ;USART.c: 42:     RCSTAbits.FERR = 0;
  2153  03F6  1118               	bcf	24,2	;volatile
  2154                           
  2155                           ;USART.c: 43:     PIE1bits.RCIE = 1;
  2156  03F7  1683               	bsf	3,5	;RP0=1, select bank1
  2157  03F8  1303               	bcf	3,6	;RP1=0, select bank1
  2158  03F9  168C               	bsf	12,5	;volatile
  2159                           
  2160                           ;USART.c: 44:     RCSTAbits.OERR = 0;
  2161  03FA  1283               	bcf	3,5	;RP0=0, select bank0
  2162  03FB  1303               	bcf	3,6	;RP1=0, select bank0
  2163  03FC  1098               	bcf	24,1	;volatile
  2164  03FD                     l175:
  2165  03FD  0008               	return
  2166  03FE                     __end_of_recibir:
  2167                           
  2168                           	psect	text10
  2169  0273                     __ptext10:	
  2170 ;; *************** function _Lcd_Write_String *****************
  2171 ;; Defined at:
  2172 ;;		line 67 in file "LCD.c"
  2173 ;; Parameters:    Size  Location     Type
  2174 ;;  a               2    6[COMMON] PTR unsigned char 
  2175 ;;		 -> s(20), STR_2(4), STR_1(17), 
  2176 ;; Auto vars:     Size  Location     Type
  2177 ;;  i               2    3[BANK0 ] int 
  2178 ;; Return value:  Size  Location     Type
  2179 ;;                  1    wreg      void 
  2180 ;; Registers used:
  2181 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
  2182 ;; Tracked objects:
  2183 ;;		On entry : 0/0
  2184 ;;		On exit  : 0/0
  2185 ;;		Unchanged: 0/0
  2186 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2187 ;;      Params:         2       0       0       0       0
  2188 ;;      Locals:         0       2       0       0       0
  2189 ;;      Temps:          0       3       0       0       0
  2190 ;;      Totals:         2       5       0       0       0
  2191 ;;Total ram usage:        7 bytes
  2192 ;; Hardware stack levels used:    1
  2193 ;; Hardware stack levels required when called:    3
  2194 ;; This function calls:
  2195 ;;		_Lcd_Write_Char
  2196 ;; This function is called by:
  2197 ;;		_main
  2198 ;; This function uses a non-reentrant model
  2199 ;;
  2200                           
  2201                           
  2202                           ;psect for function _Lcd_Write_String
  2203  0273                     _Lcd_Write_String:
  2204  0273                     l1705:	
  2205                           ;incstack = 0
  2206                           ; Regs used in _Lcd_Write_String: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
  2207                           
  2208                           
  2209                           ;LCD.c: 68:     int i;;LCD.c: 69:     for (i = 0; a[i] != '\0'; i++)
  2210  0273  1283               	bcf	3,5	;RP0=0, select bank0
  2211  0274  1303               	bcf	3,6	;RP1=0, select bank0
  2212  0275  01CD               	clrf	Lcd_Write_String@i
  2213  0276  01CE               	clrf	Lcd_Write_String@i+1
  2214  0277  2A9C               	goto	l1711
  2215  0278                     l1707:
  2216                           
  2217                           ;LCD.c: 70:         Lcd_Write_Char(a[i]);
  2218  0278  084D               	movf	Lcd_Write_String@i,w
  2219  0279  0776               	addwf	Lcd_Write_String@a,w
  2220  027A  00CB               	movwf	??_Lcd_Write_String+1
  2221  027B  0877               	movf	Lcd_Write_String@a+1,w
  2222  027C  00CA               	movwf	??_Lcd_Write_String
  2223  027D  1803               	skipnc
  2224  027E  0ACA               	incf	??_Lcd_Write_String,f
  2225  027F  1FCD               	btfss	Lcd_Write_String@i,7
  2226  0280  2A82               	goto	u1290
  2227  0281  03CA               	decf	??_Lcd_Write_String,f
  2228  0282                     u1290:
  2229  0282  1283               	bcf	3,5	;RP0=0, select bank0
  2230  0283  1303               	bcf	3,6	;RP1=0, select bank0
  2231  0284  084A               	movf	??_Lcd_Write_String,w
  2232  0285  00CC               	movwf	??_Lcd_Write_String+2
  2233  0286  084C               	movf	??_Lcd_Write_String+2,w
  2234  0287  00FF               	movwf	btemp+1
  2235  0288  084B               	movf	??_Lcd_Write_String+1,w
  2236  0289  0084               	movwf	4
  2237  028A  120A  118A  2300  120A  118A  	fcall	stringtab
  2238  028F  120A  118A  2374  120A  118A  	fcall	_Lcd_Write_Char
  2239  0294                     l1709:
  2240  0294  3001               	movlw	1
  2241  0295  1283               	bcf	3,5	;RP0=0, select bank0
  2242  0296  1303               	bcf	3,6	;RP1=0, select bank0
  2243  0297  07CD               	addwf	Lcd_Write_String@i,f
  2244  0298  1803               	skipnc
  2245  0299  0ACE               	incf	Lcd_Write_String@i+1,f
  2246  029A  3000               	movlw	0
  2247  029B  07CE               	addwf	Lcd_Write_String@i+1,f
  2248  029C                     l1711:
  2249  029C  084D               	movf	Lcd_Write_String@i,w
  2250  029D  0776               	addwf	Lcd_Write_String@a,w
  2251  029E  00CB               	movwf	??_Lcd_Write_String+1
  2252  029F  0877               	movf	Lcd_Write_String@a+1,w
  2253  02A0  00CA               	movwf	??_Lcd_Write_String
  2254  02A1  1803               	skipnc
  2255  02A2  0ACA               	incf	??_Lcd_Write_String,f
  2256  02A3  1FCD               	btfss	Lcd_Write_String@i,7
  2257  02A4  2AA6               	goto	u1300
  2258  02A5  03CA               	decf	??_Lcd_Write_String,f
  2259  02A6                     u1300:
  2260  02A6  1283               	bcf	3,5	;RP0=0, select bank0
  2261  02A7  1303               	bcf	3,6	;RP1=0, select bank0
  2262  02A8  084A               	movf	??_Lcd_Write_String,w
  2263  02A9  00CC               	movwf	??_Lcd_Write_String+2
  2264  02AA  084C               	movf	??_Lcd_Write_String+2,w
  2265  02AB  00FF               	movwf	btemp+1
  2266  02AC  084B               	movf	??_Lcd_Write_String+1,w
  2267  02AD  0084               	movwf	4
  2268  02AE  120A  118A  2300  120A  118A  	fcall	stringtab
  2269  02B3  3A00               	xorlw	0
  2270  02B4  1D03               	skipz
  2271  02B5  2AB7               	goto	u1311
  2272  02B6  2AB8               	goto	u1310
  2273  02B7                     u1311:
  2274  02B7  2A78               	goto	l1707
  2275  02B8                     u1310:
  2276  02B8                     l135:
  2277  02B8  0008               	return
  2278  02B9                     __end_of_Lcd_Write_String:
  2279                           
  2280                           	psect	text11
  2281  0374                     __ptext11:	
  2282 ;; *************** function _Lcd_Write_Char *****************
  2283 ;; Defined at:
  2284 ;;		line 58 in file "LCD.c"
  2285 ;; Parameters:    Size  Location     Type
  2286 ;;  a               1    wreg     unsigned char 
  2287 ;; Auto vars:     Size  Location     Type
  2288 ;;  a               1    5[COMMON] unsigned char 
  2289 ;; Return value:  Size  Location     Type
  2290 ;;                  1    wreg      void 
  2291 ;; Registers used:
  2292 ;;		wreg, status,2, status,0, pclath, cstack
  2293 ;; Tracked objects:
  2294 ;;		On entry : 0/0
  2295 ;;		On exit  : 0/0
  2296 ;;		Unchanged: 0/0
  2297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2298 ;;      Params:         0       0       0       0       0
  2299 ;;      Locals:         1       0       0       0       0
  2300 ;;      Temps:          1       0       0       0       0
  2301 ;;      Totals:         2       0       0       0       0
  2302 ;;Total ram usage:        2 bytes
  2303 ;; Hardware stack levels used:    1
  2304 ;; Hardware stack levels required when called:    2
  2305 ;; This function calls:
  2306 ;;		_Lcd_Port
  2307 ;; This function is called by:
  2308 ;;		_Lcd_Write_String
  2309 ;; This function uses a non-reentrant model
  2310 ;;
  2311                           
  2312                           
  2313                           ;psect for function _Lcd_Write_Char
  2314  0374                     _Lcd_Write_Char:
  2315                           
  2316                           ;incstack = 0
  2317                           ; Regs used in _Lcd_Write_Char: [wreg+status,2+status,0+pclath+cstack]
  2318                           ;Lcd_Write_Char@a stored from wreg
  2319  0374  00F5               	movwf	Lcd_Write_Char@a
  2320  0375                     l1643:
  2321                           
  2322                           ;LCD.c: 59:     PORTEbits.RE0 = 1;
  2323  0375  1283               	bcf	3,5	;RP0=0, select bank0
  2324  0376  1303               	bcf	3,6	;RP1=0, select bank0
  2325  0377  1409               	bsf	9,0	;volatile
  2326  0378                     l1645:
  2327                           
  2328                           ;LCD.c: 60:     Lcd_Port(a);
  2329  0378  0875               	movf	Lcd_Write_Char@a,w
  2330  0379  120A  118A  241C  120A  118A  	fcall	_Lcd_Port
  2331  037E                     l1647:
  2332                           
  2333                           ;LCD.c: 61:     PORTEbits.RE1 = 1;
  2334  037E  1283               	bcf	3,5	;RP0=0, select bank0
  2335  037F  1303               	bcf	3,6	;RP1=0, select bank0
  2336  0380  1489               	bsf	9,1	;volatile
  2337  0381                     l1649:
  2338                           
  2339                           ;LCD.c: 62:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  2340  0381  301A               	movlw	26
  2341  0382  00F4               	movwf	??_Lcd_Write_Char
  2342  0383                     u1457:
  2343  0383  0BF4               	decfsz	??_Lcd_Write_Char,f
  2344  0384  2B83               	goto	u1457
  2345  0385  0000               	nop
  2346  0386                     l1651:
  2347                           
  2348                           ;LCD.c: 63:     PORTEbits.RE1 = 0;
  2349  0386  1283               	bcf	3,5	;RP0=0, select bank0
  2350  0387  1303               	bcf	3,6	;RP1=0, select bank0
  2351  0388  1089               	bcf	9,1	;volatile
  2352  0389                     l1653:
  2353                           
  2354                           ;LCD.c: 64:     _delay((unsigned long)((40)*(8000000/4000000.0)));
  2355  0389  301A               	movlw	26
  2356  038A  00F4               	movwf	??_Lcd_Write_Char
  2357  038B                     u1467:
  2358  038B  0BF4               	decfsz	??_Lcd_Write_Char,f
  2359  038C  2B8B               	goto	u1467
  2360  038D  0000               	nop
  2361  038E                     l129:
  2362  038E  0008               	return
  2363  038F                     __end_of_Lcd_Write_Char:
  2364                           
  2365                           	psect	text12
  2366  0332                     __ptext12:	
  2367 ;; *************** function _Lcd_Set_Cursor *****************
  2368 ;; Defined at:
  2369 ;;		line 33 in file "LCD.c"
  2370 ;; Parameters:    Size  Location     Type
  2371 ;;  a               1    wreg     unsigned char 
  2372 ;;  b               1    7[COMMON] unsigned char 
  2373 ;; Auto vars:     Size  Location     Type
  2374 ;;  a               1    1[BANK0 ] unsigned char 
  2375 ;;  temp            1    2[BANK0 ] unsigned char 
  2376 ;; Return value:  Size  Location     Type
  2377 ;;                  1    wreg      void 
  2378 ;; Registers used:
  2379 ;;		wreg, status,2, status,0, pclath, cstack
  2380 ;; Tracked objects:
  2381 ;;		On entry : 0/0
  2382 ;;		On exit  : 0/0
  2383 ;;		Unchanged: 0/0
  2384 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2385 ;;      Params:         1       0       0       0       0
  2386 ;;      Locals:         0       2       0       0       0
  2387 ;;      Temps:          0       1       0       0       0
  2388 ;;      Totals:         1       3       0       0       0
  2389 ;;Total ram usage:        4 bytes
  2390 ;; Hardware stack levels used:    1
  2391 ;; Hardware stack levels required when called:    3
  2392 ;; This function calls:
  2393 ;;		_Lcd_Cmd
  2394 ;; This function is called by:
  2395 ;;		_main
  2396 ;; This function uses a non-reentrant model
  2397 ;;
  2398                           
  2399                           
  2400                           ;psect for function _Lcd_Set_Cursor
  2401  0332                     _Lcd_Set_Cursor:
  2402                           
  2403                           ;incstack = 0
  2404                           ; Regs used in _Lcd_Set_Cursor: [wreg+status,2+status,0+pclath+cstack]
  2405                           ;Lcd_Set_Cursor@a stored from wreg
  2406  0332  1283               	bcf	3,5	;RP0=0, select bank0
  2407  0333  1303               	bcf	3,6	;RP1=0, select bank0
  2408  0334  00CB               	movwf	Lcd_Set_Cursor@a
  2409  0335                     l1693:
  2410                           
  2411                           ;LCD.c: 34:     char temp;;LCD.c: 35:     if (a == 1) {
  2412  0335  034B               	decf	Lcd_Set_Cursor@a,w
  2413  0336  1D03               	btfss	3,2
  2414  0337  2B39               	goto	u1271
  2415  0338  2B3A               	goto	u1270
  2416  0339                     u1271:
  2417  0339  2B46               	goto	l1699
  2418  033A                     u1270:
  2419  033A                     l1695:
  2420                           
  2421                           ;LCD.c: 36:         temp = 0x80 + b - 1;
  2422  033A  0877               	movf	Lcd_Set_Cursor@b,w
  2423  033B  3E7F               	addlw	127
  2424  033C  00CA               	movwf	??_Lcd_Set_Cursor
  2425  033D  084A               	movf	??_Lcd_Set_Cursor,w
  2426  033E  00CC               	movwf	Lcd_Set_Cursor@temp
  2427  033F                     l1697:
  2428                           
  2429                           ;LCD.c: 37:         Lcd_Cmd(temp);
  2430  033F  084C               	movf	Lcd_Set_Cursor@temp,w
  2431  0340  120A  118A  238F  120A  118A  	fcall	_Lcd_Cmd
  2432                           
  2433                           ;LCD.c: 38:     } else if (a == 2) {
  2434  0345  2B57               	goto	l123
  2435  0346                     l1699:
  2436  0346  3002               	movlw	2
  2437  0347  064B               	xorwf	Lcd_Set_Cursor@a,w
  2438  0348  1D03               	btfss	3,2
  2439  0349  2B4B               	goto	u1281
  2440  034A  2B4C               	goto	u1280
  2441  034B                     u1281:
  2442  034B  2B57               	goto	l123
  2443  034C                     u1280:
  2444  034C                     l1701:
  2445                           
  2446                           ;LCD.c: 39:         temp = 0xC0 + b - 1;
  2447  034C  0877               	movf	Lcd_Set_Cursor@b,w
  2448  034D  3EBF               	addlw	191
  2449  034E  00CA               	movwf	??_Lcd_Set_Cursor
  2450  034F  084A               	movf	??_Lcd_Set_Cursor,w
  2451  0350  00CC               	movwf	Lcd_Set_Cursor@temp
  2452  0351                     l1703:
  2453                           
  2454                           ;LCD.c: 40:         Lcd_Cmd(temp);
  2455  0351  084C               	movf	Lcd_Set_Cursor@temp,w
  2456  0352  120A  118A  238F  120A  118A  	fcall	_Lcd_Cmd
  2457  0357                     l123:
  2458  0357  0008               	return
  2459  0358                     __end_of_Lcd_Set_Cursor:
  2460                           
  2461                           	psect	text13
  2462  01E6                     __ptext13:	
  2463 ;; *************** function _Lcd_Init *****************
  2464 ;; Defined at:
  2465 ;;		line 44 in file "LCD.c"
  2466 ;; Parameters:    Size  Location     Type
  2467 ;;		None
  2468 ;; Auto vars:     Size  Location     Type
  2469 ;;		None
  2470 ;; Return value:  Size  Location     Type
  2471 ;;                  1    wreg      void 
  2472 ;; Registers used:
  2473 ;;		wreg, status,2, status,0, pclath, cstack
  2474 ;; Tracked objects:
  2475 ;;		On entry : 0/0
  2476 ;;		On exit  : 0/0
  2477 ;;		Unchanged: 0/0
  2478 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2479 ;;      Params:         0       0       0       0       0
  2480 ;;      Locals:         0       0       0       0       0
  2481 ;;      Temps:          0       2       0       0       0
  2482 ;;      Totals:         0       2       0       0       0
  2483 ;;Total ram usage:        2 bytes
  2484 ;; Hardware stack levels used:    1
  2485 ;; Hardware stack levels required when called:    3
  2486 ;; This function calls:
  2487 ;;		_Lcd_Cmd
  2488 ;;		_Lcd_Port
  2489 ;; This function is called by:
  2490 ;;		_main
  2491 ;; This function uses a non-reentrant model
  2492 ;;
  2493                           
  2494                           
  2495                           ;psect for function _Lcd_Init
  2496  01E6                     _Lcd_Init:
  2497  01E6                     l1681:	
  2498                           ;incstack = 0
  2499                           ; Regs used in _Lcd_Init: [wreg+status,2+status,0+pclath+cstack]
  2500                           
  2501                           
  2502                           ;LCD.c: 45:     Lcd_Port(0x00);
  2503  01E6  3000               	movlw	0
  2504  01E7  120A  118A  241C  120A  118A  	fcall	_Lcd_Port
  2505  01EC                     l1683:
  2506                           
  2507                           ;LCD.c: 46:     _delay((unsigned long)((20)*(8000000/4000.0)));
  2508  01EC  3034               	movlw	52
  2509  01ED  1283               	bcf	3,5	;RP0=0, select bank0
  2510  01EE  1303               	bcf	3,6	;RP1=0, select bank0
  2511  01EF  00CB               	movwf	??_Lcd_Init+1
  2512  01F0  30F1               	movlw	241
  2513  01F1  00CA               	movwf	??_Lcd_Init
  2514  01F2                     u1477:
  2515  01F2  0BCA               	decfsz	??_Lcd_Init,f
  2516  01F3  29F2               	goto	u1477
  2517  01F4  0BCB               	decfsz	??_Lcd_Init+1,f
  2518  01F5  29F2               	goto	u1477
  2519  01F6                     l1685:
  2520                           
  2521                           ;LCD.c: 47:     Lcd_Cmd(0x3F);
  2522  01F6  303F               	movlw	63
  2523  01F7  120A  118A  238F  120A  118A  	fcall	_Lcd_Cmd
  2524                           
  2525                           ;LCD.c: 48:     _delay((unsigned long)((10)*(8000000/4000.0)));
  2526  01FC  301A               	movlw	26
  2527  01FD  1283               	bcf	3,5	;RP0=0, select bank0
  2528  01FE  1303               	bcf	3,6	;RP1=0, select bank0
  2529  01FF  00CB               	movwf	??_Lcd_Init+1
  2530  0200  30F7               	movlw	247
  2531  0201  00CA               	movwf	??_Lcd_Init
  2532  0202                     u1487:
  2533  0202  0BCA               	decfsz	??_Lcd_Init,f
  2534  0203  2A02               	goto	u1487
  2535  0204  0BCB               	decfsz	??_Lcd_Init+1,f
  2536  0205  2A02               	goto	u1487
  2537  0206  2A07               	nop2
  2538  0207                     l1687:
  2539                           
  2540                           ;LCD.c: 49:     Lcd_Cmd(0x3F);
  2541  0207  303F               	movlw	63
  2542  0208  120A  118A  238F  120A  118A  	fcall	_Lcd_Cmd
  2543  020D                     l1689:
  2544                           
  2545                           ;LCD.c: 50:     _delay((unsigned long)((200)*(8000000/4000000.0)));
  2546  020D  3084               	movlw	132
  2547  020E  1283               	bcf	3,5	;RP0=0, select bank0
  2548  020F  1303               	bcf	3,6	;RP1=0, select bank0
  2549  0210  00CA               	movwf	??_Lcd_Init
  2550  0211                     u1497:
  2551  0211  0BCA               	decfsz	??_Lcd_Init,f
  2552  0212  2A11               	goto	u1497
  2553  0213  0000               	nop
  2554                           
  2555                           ;LCD.c: 51:     Lcd_Cmd(0x3F);
  2556  0214  303F               	movlw	63
  2557  0215  120A  118A  238F  120A  118A  	fcall	_Lcd_Cmd
  2558                           
  2559                           ;LCD.c: 53:     Lcd_Cmd(0x38);
  2560  021A  3038               	movlw	56
  2561  021B  120A  118A  238F  120A  118A  	fcall	_Lcd_Cmd
  2562                           
  2563                           ;LCD.c: 54:     Lcd_Cmd(0x0C);
  2564  0220  300C               	movlw	12
  2565  0221  120A  118A  238F  120A  118A  	fcall	_Lcd_Cmd
  2566                           
  2567                           ;LCD.c: 55:     Lcd_Cmd(0x06);
  2568  0226  3006               	movlw	6
  2569  0227  120A  118A  238F  120A  118A  	fcall	_Lcd_Cmd
  2570  022C                     l126:
  2571  022C  0008               	return
  2572  022D                     __end_of_Lcd_Init:
  2573                           
  2574                           	psect	text14
  2575  03E6                     __ptext14:	
  2576 ;; *************** function _Lcd_Clear *****************
  2577 ;; Defined at:
  2578 ;;		line 28 in file "LCD.c"
  2579 ;; Parameters:    Size  Location     Type
  2580 ;;		None
  2581 ;; Auto vars:     Size  Location     Type
  2582 ;;		None
  2583 ;; Return value:  Size  Location     Type
  2584 ;;                  1    wreg      void 
  2585 ;; Registers used:
  2586 ;;		wreg, status,2, status,0, pclath, cstack
  2587 ;; Tracked objects:
  2588 ;;		On entry : 0/0
  2589 ;;		On exit  : 0/0
  2590 ;;		Unchanged: 0/0
  2591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2592 ;;      Params:         0       0       0       0       0
  2593 ;;      Locals:         0       0       0       0       0
  2594 ;;      Temps:          0       0       0       0       0
  2595 ;;      Totals:         0       0       0       0       0
  2596 ;;Total ram usage:        0 bytes
  2597 ;; Hardware stack levels used:    1
  2598 ;; Hardware stack levels required when called:    3
  2599 ;; This function calls:
  2600 ;;		_Lcd_Cmd
  2601 ;; This function is called by:
  2602 ;;		_main
  2603 ;; This function uses a non-reentrant model
  2604 ;;
  2605                           
  2606                           
  2607                           ;psect for function _Lcd_Clear
  2608  03E6                     _Lcd_Clear:
  2609  03E6                     l1691:	
  2610                           ;incstack = 0
  2611                           ; Regs used in _Lcd_Clear: [wreg+status,2+status,0+pclath+cstack]
  2612                           
  2613                           
  2614                           ;LCD.c: 29:     Lcd_Cmd(0);
  2615  03E6  3000               	movlw	0
  2616  03E7  120A  118A  238F  120A  118A  	fcall	_Lcd_Cmd
  2617                           
  2618                           ;LCD.c: 30:     Lcd_Cmd(1);
  2619  03EC  3001               	movlw	1
  2620  03ED  120A  118A  238F  120A  118A  	fcall	_Lcd_Cmd
  2621  03F2                     l117:
  2622  03F2  0008               	return
  2623  03F3                     __end_of_Lcd_Clear:
  2624                           
  2625                           	psect	text15
  2626  038F                     __ptext15:	
  2627 ;; *************** function _Lcd_Cmd *****************
  2628 ;; Defined at:
  2629 ;;		line 20 in file "LCD.c"
  2630 ;; Parameters:    Size  Location     Type
  2631 ;;  a               1    wreg     unsigned char 
  2632 ;; Auto vars:     Size  Location     Type
  2633 ;;  a               1    6[COMMON] unsigned char 
  2634 ;; Return value:  Size  Location     Type
  2635 ;;                  1    wreg      void 
  2636 ;; Registers used:
  2637 ;;		wreg, status,2, status,0, pclath, cstack
  2638 ;; Tracked objects:
  2639 ;;		On entry : 0/0
  2640 ;;		On exit  : 0/0
  2641 ;;		Unchanged: 0/0
  2642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2643 ;;      Params:         0       0       0       0       0
  2644 ;;      Locals:         1       0       0       0       0
  2645 ;;      Temps:          2       0       0       0       0
  2646 ;;      Totals:         3       0       0       0       0
  2647 ;;Total ram usage:        3 bytes
  2648 ;; Hardware stack levels used:    1
  2649 ;; Hardware stack levels required when called:    2
  2650 ;; This function calls:
  2651 ;;		_Lcd_Port
  2652 ;; This function is called by:
  2653 ;;		_Lcd_Clear
  2654 ;;		_Lcd_Set_Cursor
  2655 ;;		_Lcd_Init
  2656 ;; This function uses a non-reentrant model
  2657 ;;
  2658                           
  2659                           
  2660                           ;psect for function _Lcd_Cmd
  2661  038F                     _Lcd_Cmd:
  2662                           
  2663                           ;incstack = 0
  2664                           ; Regs used in _Lcd_Cmd: [wreg+status,2+status,0+pclath+cstack]
  2665                           ;Lcd_Cmd@a stored from wreg
  2666  038F  00F6               	movwf	Lcd_Cmd@a
  2667  0390                     l1633:
  2668                           
  2669                           ;LCD.c: 21:     PORTEbits.RE0 = 0;
  2670  0390  1283               	bcf	3,5	;RP0=0, select bank0
  2671  0391  1303               	bcf	3,6	;RP1=0, select bank0
  2672  0392  1009               	bcf	9,0	;volatile
  2673  0393                     l1635:
  2674                           
  2675                           ;LCD.c: 22:     Lcd_Port(a);
  2676  0393  0876               	movf	Lcd_Cmd@a,w
  2677  0394  120A  118A  241C  120A  118A  	fcall	_Lcd_Port
  2678  0399                     l1637:
  2679                           
  2680                           ;LCD.c: 23:     PORTEbits.RE1 = 1;
  2681  0399  1283               	bcf	3,5	;RP0=0, select bank0
  2682  039A  1303               	bcf	3,6	;RP1=0, select bank0
  2683  039B  1489               	bsf	9,1	;volatile
  2684  039C                     l1639:
  2685                           
  2686                           ;LCD.c: 24:     _delay((unsigned long)((4)*(8000000/4000.0)));
  2687  039C  300B               	movlw	11
  2688  039D  00F5               	movwf	??_Lcd_Cmd+1
  2689  039E  3062               	movlw	98
  2690  039F  00F4               	movwf	??_Lcd_Cmd
  2691  03A0                     u1507:
  2692  03A0  0BF4               	decfsz	??_Lcd_Cmd,f
  2693  03A1  2BA0               	goto	u1507
  2694  03A2  0BF5               	decfsz	??_Lcd_Cmd+1,f
  2695  03A3  2BA0               	goto	u1507
  2696  03A4  0000               	nop
  2697  03A5                     l1641:
  2698                           
  2699                           ;LCD.c: 25:     PORTEbits.RE1 = 0;
  2700  03A5  1283               	bcf	3,5	;RP0=0, select bank0
  2701  03A6  1303               	bcf	3,6	;RP1=0, select bank0
  2702  03A7  1089               	bcf	9,1	;volatile
  2703  03A8                     l114:
  2704  03A8  0008               	return
  2705  03A9                     __end_of_Lcd_Cmd:
  2706                           
  2707                           	psect	text16
  2708  041C                     __ptext16:	
  2709 ;; *************** function _Lcd_Port *****************
  2710 ;; Defined at:
  2711 ;;		line 16 in file "LCD.c"
  2712 ;; Parameters:    Size  Location     Type
  2713 ;;  a               1    wreg     unsigned char 
  2714 ;; Auto vars:     Size  Location     Type
  2715 ;;  a               1    3[COMMON] unsigned char 
  2716 ;; Return value:  Size  Location     Type
  2717 ;;                  1    wreg      void 
  2718 ;; Registers used:
  2719 ;;		wreg
  2720 ;; Tracked objects:
  2721 ;;		On entry : 0/0
  2722 ;;		On exit  : 0/0
  2723 ;;		Unchanged: 0/0
  2724 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2725 ;;      Params:         0       0       0       0       0
  2726 ;;      Locals:         1       0       0       0       0
  2727 ;;      Temps:          0       0       0       0       0
  2728 ;;      Totals:         1       0       0       0       0
  2729 ;;Total ram usage:        1 bytes
  2730 ;; Hardware stack levels used:    1
  2731 ;; Hardware stack levels required when called:    1
  2732 ;; This function calls:
  2733 ;;		Nothing
  2734 ;; This function is called by:
  2735 ;;		_Lcd_Cmd
  2736 ;;		_Lcd_Init
  2737 ;;		_Lcd_Write_Char
  2738 ;; This function uses a non-reentrant model
  2739 ;;
  2740                           
  2741                           
  2742                           ;psect for function _Lcd_Port
  2743  041C                     _Lcd_Port:
  2744                           
  2745                           ;incstack = 0
  2746                           ; Regs used in _Lcd_Port: [wreg]
  2747                           ;Lcd_Port@a stored from wreg
  2748  041C  00F3               	movwf	Lcd_Port@a
  2749  041D                     l1631:
  2750                           
  2751                           ;LCD.c: 17:     PORTD = a;
  2752  041D  0873               	movf	Lcd_Port@a,w
  2753  041E  1283               	bcf	3,5	;RP0=0, select bank0
  2754  041F  1303               	bcf	3,6	;RP1=0, select bank0
  2755  0420  0088               	movwf	8	;volatile
  2756  0421                     l111:
  2757  0421  0008               	return
  2758  0422                     __end_of_Lcd_Port:
  2759                           
  2760                           	psect	text17
  2761  03D5                     __ptext17:	
  2762 ;; *************** function _Config_USARTT *****************
  2763 ;; Defined at:
  2764 ;;		line 11 in file "USART.c"
  2765 ;; Parameters:    Size  Location     Type
  2766 ;;		None
  2767 ;; Auto vars:     Size  Location     Type
  2768 ;;		None
  2769 ;; Return value:  Size  Location     Type
  2770 ;;                  1    wreg      void 
  2771 ;; Registers used:
  2772 ;;		wreg
  2773 ;; Tracked objects:
  2774 ;;		On entry : 0/0
  2775 ;;		On exit  : 0/0
  2776 ;;		Unchanged: 0/0
  2777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2778 ;;      Params:         0       0       0       0       0
  2779 ;;      Locals:         0       0       0       0       0
  2780 ;;      Temps:          0       0       0       0       0
  2781 ;;      Totals:         0       0       0       0       0
  2782 ;;Total ram usage:        0 bytes
  2783 ;; Hardware stack levels used:    1
  2784 ;; Hardware stack levels required when called:    1
  2785 ;; This function calls:
  2786 ;;		Nothing
  2787 ;; This function is called by:
  2788 ;;		_main
  2789 ;; This function uses a non-reentrant model
  2790 ;;
  2791                           
  2792                           
  2793                           ;psect for function _Config_USARTT
  2794  03D5                     _Config_USARTT:
  2795  03D5                     l1243:	
  2796                           ;incstack = 0
  2797                           ; Regs used in _Config_USARTT: [wreg]
  2798                           
  2799                           
  2800                           ;USART.c: 12:     TXSTAbits.SYNC = 0;
  2801  03D5  1683               	bsf	3,5	;RP0=1, select bank1
  2802  03D6  1303               	bcf	3,6	;RP1=0, select bank1
  2803  03D7  1218               	bcf	24,4	;volatile
  2804                           
  2805                           ;USART.c: 13:     TXSTAbits.TXEN = 1;
  2806  03D8  1698               	bsf	24,5	;volatile
  2807                           
  2808                           ;USART.c: 14:     TXSTAbits.BRGH = 0;
  2809  03D9  1118               	bcf	24,2	;volatile
  2810                           
  2811                           ;USART.c: 15:     BAUDCTLbits.BRG16 = 1;
  2812  03DA  1683               	bsf	3,5	;RP0=1, select bank3
  2813  03DB  1703               	bsf	3,6	;RP1=1, select bank3
  2814  03DC  1587               	bsf	7,3	;volatile
  2815  03DD                     l1245:
  2816                           
  2817                           ;USART.c: 16:     SPBRG = 25;
  2818  03DD  3019               	movlw	25
  2819  03DE  1683               	bsf	3,5	;RP0=1, select bank1
  2820  03DF  1303               	bcf	3,6	;RP1=0, select bank1
  2821  03E0  0099               	movwf	25	;volatile
  2822  03E1                     l1247:
  2823                           
  2824                           ;USART.c: 17:     RCSTAbits.SPEN = 1;
  2825  03E1  1283               	bcf	3,5	;RP0=0, select bank0
  2826  03E2  1303               	bcf	3,6	;RP1=0, select bank0
  2827  03E3  1798               	bsf	24,7	;volatile
  2828  03E4                     l1249:
  2829                           
  2830                           ;USART.c: 18:     INTCONbits.GIE = 1;
  2831  03E4  178B               	bsf	11,7	;volatile
  2832  03E5                     l154:
  2833  03E5  0008               	return
  2834  03E6                     __end_of_Config_USARTT:
  2835                           
  2836                           	psect	text18
  2837  0358                     __ptext18:	
  2838 ;; *************** function _ISR *****************
  2839 ;; Defined at:
  2840 ;;		line 222 in file "main.c"
  2841 ;; Parameters:    Size  Location     Type
  2842 ;;		None
  2843 ;; Auto vars:     Size  Location     Type
  2844 ;;		None
  2845 ;; Return value:  Size  Location     Type
  2846 ;;                  1    wreg      void 
  2847 ;; Registers used:
  2848 ;;		wreg
  2849 ;; Tracked objects:
  2850 ;;		On entry : 0/0
  2851 ;;		On exit  : 0/0
  2852 ;;		Unchanged: 0/0
  2853 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  2854 ;;      Params:         0       0       0       0       0
  2855 ;;      Locals:         0       0       0       0       0
  2856 ;;      Temps:          3       0       0       0       0
  2857 ;;      Totals:         3       0       0       0       0
  2858 ;;Total ram usage:        3 bytes
  2859 ;; Hardware stack levels used:    1
  2860 ;; This function calls:
  2861 ;;		Nothing
  2862 ;; This function is called by:
  2863 ;;		Interrupt level 1
  2864 ;; This function uses a non-reentrant model
  2865 ;;
  2866                           
  2867                           
  2868                           ;psect for function _ISR
  2869  0358                     _ISR:
  2870  0358                     i1l1403:
  2871                           
  2872                           ;main.c: 223:     if (PIR1bits.RCIF == 1) {
  2873  0358  1283               	bcf	3,5	;RP0=0, select bank0
  2874  0359  1303               	bcf	3,6	;RP1=0, select bank0
  2875  035A  1E8C               	btfss	12,5	;volatile
  2876  035B  2B5D               	goto	u64_21
  2877  035C  2B5E               	goto	u64_20
  2878  035D                     u64_21:
  2879  035D  2B6D               	goto	i1l102
  2880  035E                     u64_20:
  2881  035E                     i1l1405:
  2882                           
  2883                           ;main.c: 224:         if (RCSTAbits.OERR == 1) {
  2884  035E  1C98               	btfss	24,1	;volatile
  2885  035F  2B61               	goto	u65_21
  2886  0360  2B62               	goto	u65_20
  2887  0361                     u65_21:
  2888  0361  2B69               	goto	i1l1411
  2889  0362                     u65_20:
  2890  0362                     i1l1407:
  2891                           
  2892                           ;main.c: 225:             RCSTAbits.CREN = 0;
  2893  0362  1218               	bcf	24,4	;volatile
  2894  0363                     i1l1409:
  2895                           
  2896                           ;main.c: 226:             _delay((unsigned long)((300)*(8000000/4000000.0)));
  2897  0363  30C7               	movlw	199
  2898  0364  00F0               	movwf	??_ISR
  2899  0365                     u151_27:
  2900  0365  0BF0               	decfsz	??_ISR,f
  2901  0366  2B65               	goto	u151_27
  2902  0367  2B68               	nop2
  2903                           
  2904                           ;main.c: 227:         } else {
  2905  0368  2B6D               	goto	i1l102
  2906  0369                     i1l1411:
  2907                           
  2908                           ;main.c: 228:             recibido = RCREG;
  2909  0369  081A               	movf	26,w	;volatile
  2910  036A  00F0               	movwf	??_ISR
  2911  036B  0870               	movf	??_ISR,w
  2912  036C  00B1               	movwf	_recibido
  2913  036D                     i1l102:
  2914  036D  0872               	movf	??_ISR+2,w
  2915  036E  008A               	movwf	10
  2916  036F  0E71               	swapf	??_ISR+1,w
  2917  0370  0083               	movwf	3
  2918  0371  0EFE               	swapf	btemp,f
  2919  0372  0E7E               	swapf	btemp,w
  2920  0373  0009               	retfie
  2921  0374                     __end_of_ISR:
  2922  007E                     btemp	set	126	;btemp
  2923  007E                     wtemp0	set	126
  2924                           
  2925                           	psect	intentry
  2926  0004                     __pintentry:	
  2927                           ;incstack = 0
  2928                           ; Regs used in _ISR: [wreg]
  2929                           
  2930  0004                     interrupt_function:
  2931  007E                     saved_w	set	btemp
  2932  0004  00FE               	movwf	btemp
  2933  0005  0E03               	swapf	3,w
  2934  0006  00F1               	movwf	??_ISR+1
  2935  0007  080A               	movf	10,w
  2936  0008  00F2               	movwf	??_ISR+2
  2937  0009  120A  118A  2B58   	ljmp	_ISR
  2938                           
  2939                           	psect	config
  2940                           
  2941                           ;Config register CONFIG1 @ 0x2007
  2942                           ;	Oscillator Selection bits
  2943                           ;	FOSC = INTRC_CLKOUT, INTOSC oscillator: CLKOUT function on RA6/OSC2/CLKOUT pin, I/O fu
      +                          nction on RA7/OSC1/CLKIN
  2944                           ;	Watchdog Timer Enable bit
  2945                           ;	WDTE = OFF, WDT disabled and can be enabled by SWDTEN bit of the WDTCON register
  2946                           ;	Power-up Timer Enable bit
  2947                           ;	PWRTE = OFF, PWRT disabled
  2948                           ;	RE3/MCLR pin function select bit
  2949                           ;	MCLRE = OFF, RE3/MCLR pin function is digital input, MCLR internally tied to VDD
  2950                           ;	Code Protection bit
  2951                           ;	CP = OFF, Program memory code protection is disabled
  2952                           ;	Data Code Protection bit
  2953                           ;	CPD = OFF, Data memory code protection is disabled
  2954                           ;	Brown Out Reset Selection bits
  2955                           ;	BOREN = OFF, BOR disabled
  2956                           ;	Internal External Switchover bit
  2957                           ;	IESO = OFF, Internal/External Switchover mode is disabled
  2958                           ;	Fail-Safe Clock Monitor Enabled bit
  2959                           ;	FCMEN = OFF, Fail-Safe Clock Monitor is disabled
  2960                           ;	Low Voltage Programming Enable bit
  2961                           ;	LVP = OFF, RB3 pin has digital I/O, HV on MCLR must be used for programming
  2962                           ;	In-Circuit Debugger Mode bit
  2963                           ;	DEBUG = 0x1, unprogrammed default
  2964  2007                     	org	8199
  2965  2007  20D5               	dw	8405
  2966                           
  2967                           ;Config register CONFIG2 @ 0x2008
  2968                           ;	Brown-out Reset Selection bit
  2969                           ;	BOR4V = BOR40V, Brown-out Reset set to 4.0V
  2970                           ;	Flash Program Memory Self Write Enable bits
  2971                           ;	WRT = OFF, Write protection off
  2972  2008                     	org	8200
  2973  2008  3FFF               	dw	16383

Data Sizes:
    Strings     24
    Constant    10
    Data        2
    BSS         43
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     25      67
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 3
		 -> STR_3(CODE[3]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 20
		 -> s(BANK0[20]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    Lcd_Write_String@a	PTR unsigned char  size(2) Largest target is 20
		 -> s(BANK0[20]), STR_2(CODE[4]), STR_1(CODE[17]), 


Critical Paths under _main in COMMON

    _main->_Lcd_Set_Cursor
    _main->_Lcd_Write_String
    _sprintf->___lwdiv
    ___lwmod->___lwdiv
    _Lcd_Write_String->_Lcd_Write_Char
    _Lcd_Write_Char->_Lcd_Port
    _Lcd_Set_Cursor->_Lcd_Cmd
    _Lcd_Init->_Lcd_Cmd
    _Lcd_Clear->_Lcd_Cmd
    _Lcd_Cmd->_Lcd_Port

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->___lwmod
    ___lwmod->___lwdiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    3077
                                             22 BANK0      3     3      0
                      _Config_USARTT
                          _Lcd_Clear
                           _Lcd_Init
                     _Lcd_Set_Cursor
                   _Lcd_Write_String
                            _recibir
                              _setup
                            _spiInit
                            _spiRead
                           _spiWrite
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             21    18      3    1554
                                              9 BANK0     13    10      3
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4     311
                                              3 BANK0      6     2      4
                            ___lwdiv (ARG)
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     421
                                              3 COMMON     5     1      4
                                              0 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _spiWrite                                             1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _spiRead                                              0     0      0       0
                     _spiReceiveWait
 ---------------------------------------------------------------------------------
 (2) _spiReceiveWait                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _spiInit                                              4     1      3     360
                                              3 COMMON     4     1      3
 ---------------------------------------------------------------------------------
 (1) _setup                                                0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _recibir                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Lcd_Write_String                                     7     5      2     462
                                              6 COMMON     2     0      2
                                              0 BANK0      5     5      0
                     _Lcd_Write_Char
 ---------------------------------------------------------------------------------
 (2) _Lcd_Write_Char                                       2     2      0      62
                                              4 COMMON     2     2      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Set_Cursor                                       4     3      1     524
                                              7 COMMON     1     0      1
                                              0 BANK0      3     3      0
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             2     2      0      93
                                              0 BANK0      2     2      0
                            _Lcd_Cmd
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (1) _Lcd_Clear                                            0     0      0      62
                            _Lcd_Cmd
 ---------------------------------------------------------------------------------
 (2) _Lcd_Cmd                                              3     3      0      62
                                              4 COMMON     3     3      0
                           _Lcd_Port
 ---------------------------------------------------------------------------------
 (3) _Lcd_Port                                             1     1      0      31
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _Config_USARTT                                        0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _ISR                                                  3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Config_USARTT
   _Lcd_Clear
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Init
     _Lcd_Cmd
       _Lcd_Port
     _Lcd_Port
   _Lcd_Set_Cursor
     _Lcd_Cmd
       _Lcd_Port
   _Lcd_Write_String
     _Lcd_Write_Char
       _Lcd_Port
   _recibir
   _setup
   _spiInit
   _spiRead
     _spiReceiveWait
   _spiWrite
   _sprintf
     ___lwdiv
     ___lwmod
       ___lwdiv (ARG)

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     19      43       5       83.8%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       B       1       78.6%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      4E      12        0.0%
ABS                  0      0      4E       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.31 build 20201012212115 
Symbol Table                                                                                   Fri Feb 19 23:34:05 2021

                        _p 0020                          _s 0036                          _v 002C  
                        _x 0024                          pc 0002                _SSPSTATbits 0094  
                       l88 03D4                         _vv 0028                         fsr 0004  
                      l111 0421                        l201 041B                        l114 03A8  
                      l123 0357                        l117 03F2                        l126 022C  
                      l135 02B8                        l129 038E                        l209 0406  
                      l154 03E5                        l175 03FD                        l191 03B9  
                      l319 0112                        l192 03BE                        l195 040F  
                      l605 02F4                        l198 0415                        l595 0272  
                      u500 03B1                        u501 03B0                        u360 0415  
                      u440 02C1                        u361 0414                        u441 02C0  
                      u460 02D3                        _ISR 0358                        u461 02D2  
                      u470 02DD                        u471 02DC                        u455 02C5  
                      u490 02F0                        u491 02EF                        u475 02D9  
                      u485 02E4                        fsr0 0004                        indf 0000  
                     ?_ISR 0070                       l1201 02D3                       l1203 02DD  
                     l1221 03C6                       l1213 03BF                       l1205 02E3  
                     l1231 03D0                       l1223 03CA                       l1215 03C2  
                     l1207 02EA                       l1225 03CD                       l1217 03C4  
                     l1241 03B8                       l1233 03AA                       l1209 02F0  
                     l1243 03D5                       l1227 03CE                       l1219 03C5  
                     l1235 03B1                       l1163 040F                       l1245 03DD  
                     l1253 03F3                       l1229 03CF                       l1237 03B3  
                     l1247 03E1                       l1239 03B5                       l1191 02B9  
                     l1249 03E4                       l1193 02C1                       l1291 0403  
                     l1195 02C4                       l1701 034C                       l1197 02CB  
                     l1631 041D                       l1703 0351                       l1711 029C  
                     l1287 0417                       l1199 02CF                       l1641 03A5  
                     l1633 0390                       l1705 0273                       l1289 03FE  
                     l1721 0043                       l1713 002C                       l1801 0184  
                     l1635 0393                       l1651 0386                       l1643 0375  
                     l1707 0278                       l1731 006D                       l1715 0031  
                     l1811 01D3                       l1803 018E                       l1637 0399  
                     l1653 0389                       l1645 0378                       l1709 0294  
                     l1661 023A                       l1733 0071                       l1725 0044  
                     l1717 0037                       l1805 0199                       l1639 039C  
                     l1647 037E                       l1671 0260                       l1663 0241  
                     l1655 022D                       l1751 00A8                       l1743 007C  
                     l1735 0075                       l1727 0061                       l1719 003E  
                     l1807 019C                       l1681 01E6                       l1649 0381  
                     l1673 0261                       l1665 0245                       l1657 0231  
                     l1761 00EF                       l1753 00AF                       l1737 007A  
                     l1729 0069                       l1833 0056                       l1809 01AB  
                     l1691 03E6                       l1683 01EC                       l1675 0268  
                     l1667 0249                       l1659 0237                       l1763 00F3  
                     l1755 00B3                       l1747 0098                       l1685 01F6  
                     l1693 0335                       l1669 025A                       l1677 026E  
                     l1757 00B8                       l1749 00A2                       l1765 00FC  
                     l1781 0130                       l1687 0207                       l1695 033A  
                     l1759 00E8                       l1767 010E                       l1791 0158  
                     l1783 0135                       l1775 0113                       l1689 020D  
                     l1697 033F                       l1793 0161                       l1785 013D  
                     l1777 0126                       l1699 0346                       l1795 0170  
                     l1787 0146                       l1779 012B                       l1797 0173  
                     l1789 014E                       l1799 017E                       STR_1 031A  
                     STR_2 032B                       STR_3 032F                       u1200 0237  
                     u1201 0236                       u1300 02A6                       u1220 0249  
                     u1221 0248                       u1310 02B8                       u1311 02B7  
                     u1215 023B                       u1240 025A                       u1320 0037  
                     u1241 0259                       u1321 0036                       u1330 0071  
                     u1235 024A                       u1331 0070                       u1260 026E  
                     u1340 0097                       u1261 026D                       u1245 0256  
                     u1341 0096                       u1270 033A                       u1350 00A2  
                     u1271 0339                       u1255 0262                       u1351 00A1  
                     u1407 0169                       u1280 034C                       u1360 00A8  
                     u1281 034B                       u1361 00A7                       u1345 0093  
                     u1417 0179                       u1290 0282                       u1370 00FC  
                     u1507 03A0                       u1371 00FB                       u1427 0194  
                     u1380 010E                       u1381 010D                       u1437 01A4  
                     u1390 014E                       u1447 01DB                       u1391 014D  
                     u1457 0383                       u1467 038B                       u1477 01F2  
                     u1487 0202                       u1497 0211                       _TRMT 04C1  
        ?_Lcd_Write_String 0076                       _flag 0079                       _main 0113  
                     btemp 007E                       start 000C         ??_Lcd_Write_String 004A  
          __end_of_Lcd_Cmd 03A9                      ??_ISR 0070                      ?_main 0070  
                    _ANSEL 0188            __end_of___lwdiv 0273                      i1l102 036D  
          __end_of___lwmod 02F5                      _RCREG 001A                      _SPBRG 0099  
                    _PORTB 0006                      _PORTD 0008                      _PORTE 0009  
                    u64_20 035E                      u64_21 035D                      u65_20 0362  
                    u65_21 0361    __size_of_Lcd_Set_Cursor 0026                      _TRISB 0086  
                    _TRISC 0087                      _TRISD 0088                      _TRISE 0089  
                    _TXREG 0019            __end_of_dpowers 031A                      _count 0032  
          __end_of_recibir 03FE                      _setup 03BF                      _turno 0078  
                    pclath 000A            __end_of_spiInit 03BF            __end_of_spiRead 0407  
                    status 0003                      wtemp0 007E            __end_of_sprintf 0113  
         __end_of_Lcd_Init 022D           __end_of_Lcd_Port 0422            __initialization 000F  
             __end_of_main 01E6                     ??_main 0060         __size_of_Lcd_Clear 000D  
                   ?_setup 0070                     i1l1411 0369                     i1l1403 0358  
                   i1l1405 035E                     i1l1407 0362                     i1l1409 0363  
                   u151_27 0365                  ??_Lcd_Cmd 0074    __size_of_Lcd_Write_Char 001B  
                   _TRISC3 043B                     _TRISC5 043D                     _SSPCON 0014  
                   _SSPBUF 0013                  ??___lwdiv 0077                  ??___lwmod 0051  
                   _valorA 0033                     _valorC 0034                     _valorT 0035  
             __pdataCOMMON 0078                  ??_recibir 0073                     saved_w 007E  
         __end_of_spiWrite 041C                  ??_spiInit 0076                  ??_spiRead 0073  
                ??_sprintf 0056            Lcd_Set_Cursor@a 004B            Lcd_Set_Cursor@b 0077  
  __end_of__initialization 0025          __end_of_Lcd_Clear 03F3      __end_of_Config_USARTT 03E6  
           __pcstackCOMMON 0070              __end_of_setup 03D5             _Lcd_Set_Cursor 0332  
                ?_Lcd_Init 0070                  ?_Lcd_Port 0070                    ??_setup 0073  
               __pbssBANK0 0020                 __pmaintext 0113                 __pintentry 0004  
  __size_of_spiReceiveWait 0007  __size_of_Lcd_Write_String 0046     __end_of_Lcd_Set_Cursor 0358  
               ??_Lcd_Init 004A                 ??_Lcd_Port 0073                    _SSPSTAT 0094  
               __stringtab 0300             _Lcd_Write_Char 0374                    _Lcd_Cmd 038F  
                ?_spiWrite 0070                    ___lwdiv 022D                    ___lwmod 02B9  
          ?_Lcd_Set_Cursor 0077                    __ptext1 0029                    __ptext2 02B9  
                  __ptext3 022D                    __ptext4 0416                    __ptext5 03FE  
                  __ptext6 040F                    __ptext7 03A9                    __ptext8 03BF  
                  __ptext9 03F3               __size_of_ISR 001C                    _enviado 0030  
                  _dpowers 0310                    _recibir 03F3                    _spiInit 03A9  
                  _spiRead 03FE                    _retorno 007A                    _sprintf 0029  
                  clrloop0 0408     __end_of_Lcd_Write_Char 038F       end_of_initialization 0025  
                _RCSTAbits 0018                 ??_spiWrite 0073                  Lcd_Port@a 0073  
                _PORTCbits 0007                  _PORTEbits 0009                spiWrite@dat 0073  
          ?_Lcd_Write_Char 0070          Lcd_Write_String@a 0076          Lcd_Write_String@i 004D  
                _TXSTAbits 0098                  _Lcd_Clear 03E6             _spiReceiveWait 040F  
         _Lcd_Write_String 0273              __pidataCOMMON 0422                _BAUDCTLbits 0187  
      start_initialization 000F                __end_of_ISR 0374          __size_of_Lcd_Init 0047  
        __size_of_Lcd_Port 0006     __end_of_spiReceiveWait 0416                 ?_Lcd_Clear 0070  
          Lcd_Write_Char@a 0075                __pbssCOMMON 007A                  ___latbits 0002  
            __pcstackBANK0 004A     __size_of_Config_USARTT 0011                   ?_Lcd_Cmd 0070  
              sprintf@flag 005A                sprintf@prec 005B           ___lwdiv@dividend 0075  
          ?_spiReceiveWait 0070           ??_Lcd_Set_Cursor 004A                   ?___lwdiv 0073  
                 ?___lwmod 004D          __size_of_spiWrite 0006                  __pstrings 0300  
                 ?_recibir 0070                   ?_spiInit 0073                   ?_spiRead 0070  
         ___lwdiv@quotient 004B                   ?_sprintf 0053             __size_of_setup 0016  
     spiInit@sTransmitEdge 0075          interrupt_function 0004                  clear_ram0 0407  
                 _PIE1bits 008C         spiInit@sDataSample 0073                   Lcd_Cmd@a 0076  
                 _PIR1bits 000C              _Config_USARTT 03D5                ??_Lcd_Clear 0077  
              __stringbase 030F           ??_Lcd_Write_Char 0074                   _Lcd_Init 01E6  
                 _Lcd_Port 041C   __end_of_Lcd_Write_String 02B9           __size_of_Lcd_Cmd 001A  
           ?_Config_USARTT 0070           __size_of___lwdiv 0046           __size_of___lwmod 003C  
       __end_of__stringtab 0310                 sprintf@val 005C           __size_of_recibir 000B  
          ___lwdiv@divisor 0073            ___lwdiv@counter 004A                   __ptext10 0273  
                 __ptext11 0374                   __ptext12 0332                   __ptext13 01E6  
                 __ptext14 03E6                   __ptext15 038F                   __ptext16 041C  
                 __ptext17 03D5                   __ptext18 0358           __size_of_spiInit 0016  
         __size_of_spiRead 0009           __size_of_sprintf 00EA              __size_of_main 00D3  
                 _recibido 0031                   _spiWrite 0416               spiInit@sType 0076  
        spiInit@sClockIdle 0074                 _INTCONbits 000B                   intlevel1 0000  
                sprintf@ap 0059                  sprintf@sp 005E           ___lwmod@dividend 004F  
         ??_spiReceiveWait 0073            ??_Config_USARTT 0073                  stringcode 030A  
       Lcd_Set_Cursor@temp 004C                   sprintf@c 005F                   sprintf@f 0053  
          ___lwmod@divisor 004D            ___lwmod@counter 0052                   stringdir 030A  
                 stringtab 0300  
